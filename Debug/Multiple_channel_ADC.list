
Multiple_channel_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001588  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a64  08007a64  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a64  08007a64  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007a6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000090  08007af8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08007af8  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d748  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248f  00000000  00000000  0002d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  00030920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018431  00000000  00000000  000312bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108fd  00000000  00000000  000496ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a11d  00000000  00000000  00059feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af8  00000000  00000000  000e4108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e7c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	080064c4 	.word	0x080064c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	080064c4 	.word	0x080064c4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_f2uiz>:
 8001020:	0042      	lsls	r2, r0, #1
 8001022:	d20e      	bcs.n	8001042 <__aeabi_f2uiz+0x22>
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30b      	bcc.n	8001042 <__aeabi_f2uiz+0x22>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d409      	bmi.n	8001048 <__aeabi_f2uiz+0x28>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	4770      	bx	lr
 8001042:	f04f 0000 	mov.w	r0, #0
 8001046:	4770      	bx	lr
 8001048:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800104c:	d101      	bne.n	8001052 <__aeabi_f2uiz+0x32>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	d102      	bne.n	8001058 <__aeabi_f2uiz+0x38>
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	4770      	bx	lr
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_UART_RxCpltCallback+0x24>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d104      	bne.n	800107c <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_UART_Receive_IT(&huart1,&rxdata,1); // Enabling interrupt receive again
 8001072:	2201      	movs	r2, #1
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <HAL_UART_RxCpltCallback+0x28>)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_UART_RxCpltCallback+0x2c>)
 8001078:	f003 fe50 	bl	8004d1c <HAL_UART_Receive_IT>
  }
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013800 	.word	0x40013800
 8001088:	200001c8 	.word	0x200001c8
 800108c:	20000174 	.word	0x20000174

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001096:	f001 f8c9 	bl	800222c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109a:	f000 f999 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109e:	f000 fac5 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 80010a2:	f000 faa5 	bl	80015f0 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a6:	f000 f9ef 	bl	8001488 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010aa:	f000 fa49 	bl	8001540 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010ae:	f000 fa75 	bl	800159c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
SSD1306_Init();
 80010b2:	f000 fc1b 	bl	80018ec <SSD1306_Init>
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readvalue,3);
 80010b6:	2203      	movs	r2, #3
 80010b8:	49a3      	ldr	r1, [pc, #652]	; (8001348 <main+0x2b8>)
 80010ba:	48a4      	ldr	r0, [pc, #656]	; (800134c <main+0x2bc>)
 80010bc:	f001 fa14 	bl	80024e8 <HAL_ADC_Start_DMA>
HAL_UART_Receive_IT(&huart1, &rxdata, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	49a3      	ldr	r1, [pc, #652]	; (8001350 <main+0x2c0>)
 80010c4:	48a3      	ldr	r0, [pc, #652]	; (8001354 <main+0x2c4>)
 80010c6:	f003 fe29 	bl	8004d1c <HAL_UART_Receive_IT>
SSD1306_GotoXY(40,8);
 80010ca:	2108      	movs	r1, #8
 80010cc:	2028      	movs	r0, #40	; 0x28
 80010ce:	f000 fd75 	bl	8001bbc <SSD1306_GotoXY>
SSD1306_Puts("DATA",&Font_11x18,1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	49a0      	ldr	r1, [pc, #640]	; (8001358 <main+0x2c8>)
 80010d6:	48a1      	ldr	r0, [pc, #644]	; (800135c <main+0x2cc>)
 80010d8:	f000 fe06 	bl	8001ce8 <SSD1306_Puts>
SSD1306_GotoXY(25,40);
 80010dc:	2128      	movs	r1, #40	; 0x28
 80010de:	2019      	movs	r0, #25
 80010e0:	f000 fd6c 	bl	8001bbc <SSD1306_GotoXY>
SSD1306_Puts("MONITOR",&Font_11x18,1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	499c      	ldr	r1, [pc, #624]	; (8001358 <main+0x2c8>)
 80010e8:	489d      	ldr	r0, [pc, #628]	; (8001360 <main+0x2d0>)
 80010ea:	f000 fdfd 	bl	8001ce8 <SSD1306_Puts>
SSD1306_UpdateScreen();
 80010ee:	f000 fcc1 	bl	8001a74 <SSD1306_UpdateScreen>
HAL_Delay(5000);
 80010f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f6:	f001 f8fb 	bl	80022f0 <HAL_Delay>
SSD1306_Clear();
 80010fa:	f000 fe1a 	bl	8001d32 <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rxdata == 78){
 80010fe:	4b94      	ldr	r3, [pc, #592]	; (8001350 <main+0x2c0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b4e      	cmp	r3, #78	; 0x4e
 8001104:	f040 80d2 	bne.w	80012ac <main+0x21c>
	  VI = (int)voltage;
 8001108:	4b96      	ldr	r3, [pc, #600]	; (8001364 <main+0x2d4>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fc89 	bl	8000a28 <__aeabi_d2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b93      	ldr	r3, [pc, #588]	; (8001368 <main+0x2d8>)
 800111c:	701a      	strb	r2, [r3, #0]
	  float fractionalPart= voltage - VI;
 800111e:	4b91      	ldr	r3, [pc, #580]	; (8001364 <main+0x2d4>)
 8001120:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001124:	4b90      	ldr	r3, [pc, #576]	; (8001368 <main+0x2d8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f963 	bl	80003f4 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff f80f 	bl	8000158 <__aeabi_dsub>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fc99 	bl	8000a78 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	60fb      	str	r3, [r7, #12]
	  VD = (fractionalPart*100);
 800114a:	4988      	ldr	r1, [pc, #544]	; (800136c <main+0x2dc>)
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fdf1 	bl	8000d34 <__aeabi_fmul>
 8001152:	4603      	mov	r3, r0
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff63 	bl	8001020 <__aeabi_f2uiz>
 800115a:	4603      	mov	r3, r0
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b84      	ldr	r3, [pc, #528]	; (8001370 <main+0x2e0>)
 8001160:	701a      	strb	r2, [r3, #0]
	  sprintf(strCopy,"%d.%02d" ,VI,VD);
 8001162:	4b81      	ldr	r3, [pc, #516]	; (8001368 <main+0x2d8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <main+0x2e0>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4981      	ldr	r1, [pc, #516]	; (8001374 <main+0x2e4>)
 800116e:	4882      	ldr	r0, [pc, #520]	; (8001378 <main+0x2e8>)
 8001170:	f004 fb0c 	bl	800578c <siprintf>
	  SSD1306_GotoXY(0,0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f000 fd20 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts("Voltage:-",&Font_7x10,1);
 800117c:	2201      	movs	r2, #1
 800117e:	497f      	ldr	r1, [pc, #508]	; (800137c <main+0x2ec>)
 8001180:	487f      	ldr	r0, [pc, #508]	; (8001380 <main+0x2f0>)
 8001182:	f000 fdb1 	bl	8001ce8 <SSD1306_Puts>
	  SSD1306_GotoXY(77,0);
 8001186:	2100      	movs	r1, #0
 8001188:	204d      	movs	r0, #77	; 0x4d
 800118a:	f000 fd17 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts(strCopy,&Font_7x10,1);
 800118e:	2201      	movs	r2, #1
 8001190:	497a      	ldr	r1, [pc, #488]	; (800137c <main+0x2ec>)
 8001192:	4879      	ldr	r0, [pc, #484]	; (8001378 <main+0x2e8>)
 8001194:	f000 fda8 	bl	8001ce8 <SSD1306_Puts>

	  TI= (int)T;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <main+0x2f4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff19 	bl	8000fd4 <__aeabi_f2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <main+0x2f8>)
 80011a8:	701a      	strb	r2, [r3, #0]
	  float FractionPart =  T - TI;
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <main+0x2f4>)
 80011ac:	681c      	ldr	r4, [r3, #0]
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <main+0x2f8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd6a 	bl	8000c8c <__aeabi_i2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff fcaf 	bl	8000b20 <__aeabi_fsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	60bb      	str	r3, [r7, #8]
	  TD = (FractionPart*10);
 80011c6:	4971      	ldr	r1, [pc, #452]	; (800138c <main+0x2fc>)
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f7ff fdb3 	bl	8000d34 <__aeabi_fmul>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff25 	bl	8001020 <__aeabi_f2uiz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <main+0x300>)
 80011dc:	701a      	strb	r2, [r3, #0]
	  sprintf(strTemp,"%d.%02d",TI,TD);
 80011de:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <main+0x2f8>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <main+0x300>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4962      	ldr	r1, [pc, #392]	; (8001374 <main+0x2e4>)
 80011ea:	486a      	ldr	r0, [pc, #424]	; (8001394 <main+0x304>)
 80011ec:	f004 face 	bl	800578c <siprintf>
	  SSD1306_GotoXY(0,20);
 80011f0:	2114      	movs	r1, #20
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 fce2 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts("Temp:-",&Font_7x10,1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	4960      	ldr	r1, [pc, #384]	; (800137c <main+0x2ec>)
 80011fc:	4866      	ldr	r0, [pc, #408]	; (8001398 <main+0x308>)
 80011fe:	f000 fd73 	bl	8001ce8 <SSD1306_Puts>
	  SSD1306_GotoXY(77,20);
 8001202:	2114      	movs	r1, #20
 8001204:	204d      	movs	r0, #77	; 0x4d
 8001206:	f000 fcd9 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts(strTemp,&Font_7x10,1);
 800120a:	2201      	movs	r2, #1
 800120c:	495b      	ldr	r1, [pc, #364]	; (800137c <main+0x2ec>)
 800120e:	4861      	ldr	r0, [pc, #388]	; (8001394 <main+0x304>)
 8001210:	f000 fd6a 	bl	8001ce8 <SSD1306_Puts>

	  SSD1306_UpdateScreen();
 8001214:	f000 fc2e 	bl	8001a74 <SSD1306_UpdateScreen>
	  CI= (int)current;
 8001218:	4b60      	ldr	r3, [pc, #384]	; (800139c <main+0x30c>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fc01 	bl	8000a28 <__aeabi_d2iz>
 8001226:	4603      	mov	r3, r0
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <main+0x310>)
 800122c:	701a      	strb	r2, [r3, #0]
	  float FractialPart =  current - CI;
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <main+0x30c>)
 8001230:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001234:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <main+0x310>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f8db 	bl	80003f4 <__aeabi_i2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7fe ff87 	bl	8000158 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc11 	bl	8000a78 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	607b      	str	r3, [r7, #4]
	  CD = (FractialPart*100);
 800125a:	4944      	ldr	r1, [pc, #272]	; (800136c <main+0x2dc>)
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fd69 	bl	8000d34 <__aeabi_fmul>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fedb 	bl	8001020 <__aeabi_f2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <main+0x314>)
 8001270:	701a      	strb	r2, [r3, #0]
	  sprintf(strCurr,"%d.%02d C",CI,CD);
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <main+0x310>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <main+0x314>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	494a      	ldr	r1, [pc, #296]	; (80013a8 <main+0x318>)
 800127e:	484b      	ldr	r0, [pc, #300]	; (80013ac <main+0x31c>)
 8001280:	f004 fa84 	bl	800578c <siprintf>
	  SSD1306_GotoXY(0,40);
 8001284:	2128      	movs	r1, #40	; 0x28
 8001286:	2000      	movs	r0, #0
 8001288:	f000 fc98 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts("Curr:-",&Font_7x10,1);
 800128c:	2201      	movs	r2, #1
 800128e:	493b      	ldr	r1, [pc, #236]	; (800137c <main+0x2ec>)
 8001290:	4847      	ldr	r0, [pc, #284]	; (80013b0 <main+0x320>)
 8001292:	f000 fd29 	bl	8001ce8 <SSD1306_Puts>
	  SSD1306_GotoXY(77,40);
 8001296:	2128      	movs	r1, #40	; 0x28
 8001298:	204d      	movs	r0, #77	; 0x4d
 800129a:	f000 fc8f 	bl	8001bbc <SSD1306_GotoXY>
	  SSD1306_Puts(strCurr,&Font_7x10,1);
 800129e:	2201      	movs	r2, #1
 80012a0:	4936      	ldr	r1, [pc, #216]	; (800137c <main+0x2ec>)
 80012a2:	4842      	ldr	r0, [pc, #264]	; (80013ac <main+0x31c>)
 80012a4:	f000 fd20 	bl	8001ce8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80012a8:	f000 fbe4 	bl	8001a74 <SSD1306_UpdateScreen>
	  }
	  if(rxdata = 82){
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <main+0x2c0>)
 80012ae:	2252      	movs	r2, #82	; 0x52
 80012b0:	701a      	strb	r2, [r3, #0]
		  power = voltage *current;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <main+0x2d4>)
 80012b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <main+0x30c>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f903 	bl	80004c8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	493b      	ldr	r1, [pc, #236]	; (80013b4 <main+0x324>)
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
		  sprintf(powCopy,"%d.02",power);
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <main+0x324>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	4939      	ldr	r1, [pc, #228]	; (80013b8 <main+0x328>)
 80012d4:	4839      	ldr	r0, [pc, #228]	; (80013bc <main+0x32c>)
 80012d6:	f004 fa59 	bl	800578c <siprintf>
		  SSD1306_GotoXY(0,0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fc6d 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts("Power",&Font_7x10,1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4925      	ldr	r1, [pc, #148]	; (800137c <main+0x2ec>)
 80012e6:	4836      	ldr	r0, [pc, #216]	; (80013c0 <main+0x330>)
 80012e8:	f000 fcfe 	bl	8001ce8 <SSD1306_Puts>
		  SSD1306_GotoXY(77,0);
 80012ec:	2100      	movs	r1, #0
 80012ee:	204d      	movs	r0, #77	; 0x4d
 80012f0:	f000 fc64 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts(powCopy,&Font_7x10,1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4921      	ldr	r1, [pc, #132]	; (800137c <main+0x2ec>)
 80012f8:	4830      	ldr	r0, [pc, #192]	; (80013bc <main+0x32c>)
 80012fa:	f000 fcf5 	bl	8001ce8 <SSD1306_Puts>
		  SSD1306_GotoXY(0,20);
 80012fe:	2114      	movs	r1, #20
 8001300:	2000      	movs	r0, #0
 8001302:	f000 fc5b 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts("WH",&Font_7x10,1);
 8001306:	2201      	movs	r2, #1
 8001308:	491c      	ldr	r1, [pc, #112]	; (800137c <main+0x2ec>)
 800130a:	482e      	ldr	r0, [pc, #184]	; (80013c4 <main+0x334>)
 800130c:	f000 fcec 	bl	8001ce8 <SSD1306_Puts>
		  SSD1306_GotoXY(77,20);
 8001310:	2114      	movs	r1, #20
 8001312:	204d      	movs	r0, #77	; 0x4d
 8001314:	f000 fc52 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts("0:00",&Font_7x10,1);
 8001318:	2201      	movs	r2, #1
 800131a:	4918      	ldr	r1, [pc, #96]	; (800137c <main+0x2ec>)
 800131c:	482a      	ldr	r0, [pc, #168]	; (80013c8 <main+0x338>)
 800131e:	f000 fce3 	bl	8001ce8 <SSD1306_Puts>
		  SSD1306_GotoXY(0,40);
 8001322:	2128      	movs	r1, #40	; 0x28
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fc49 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts("AH",&Font_7x10,1);
 800132a:	2201      	movs	r2, #1
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <main+0x2ec>)
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <main+0x33c>)
 8001330:	f000 fcda 	bl	8001ce8 <SSD1306_Puts>
		  SSD1306_GotoXY(77,40);
 8001334:	2128      	movs	r1, #40	; 0x28
 8001336:	204d      	movs	r0, #77	; 0x4d
 8001338:	f000 fc40 	bl	8001bbc <SSD1306_GotoXY>
		  SSD1306_Puts("0:00",&Font_7x10,1);
 800133c:	2201      	movs	r2, #1
 800133e:	490f      	ldr	r1, [pc, #60]	; (800137c <main+0x2ec>)
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <main+0x338>)
 8001342:	f000 fcd1 	bl	8001ce8 <SSD1306_Puts>
	  if(rxdata == 78){
 8001346:	e6da      	b.n	80010fe <main+0x6e>
 8001348:	200001bc 	.word	0x200001bc
 800134c:	200000ac 	.word	0x200000ac
 8001350:	200001c8 	.word	0x200001c8
 8001354:	20000174 	.word	0x20000174
 8001358:	20000008 	.word	0x20000008
 800135c:	080064dc 	.word	0x080064dc
 8001360:	080064e4 	.word	0x080064e4
 8001364:	20000220 	.word	0x20000220
 8001368:	200001c2 	.word	0x200001c2
 800136c:	42c80000 	.word	0x42c80000
 8001370:	200001c3 	.word	0x200001c3
 8001374:	080064ec 	.word	0x080064ec
 8001378:	200001cc 	.word	0x200001cc
 800137c:	20000000 	.word	0x20000000
 8001380:	080064f4 	.word	0x080064f4
 8001384:	20000248 	.word	0x20000248
 8001388:	200001c6 	.word	0x200001c6
 800138c:	41200000 	.word	0x41200000
 8001390:	200001c7 	.word	0x200001c7
 8001394:	200001f4 	.word	0x200001f4
 8001398:	08006500 	.word	0x08006500
 800139c:	20000238 	.word	0x20000238
 80013a0:	200001c4 	.word	0x200001c4
 80013a4:	200001c5 	.word	0x200001c5
 80013a8:	08006508 	.word	0x08006508
 80013ac:	200001e0 	.word	0x200001e0
 80013b0:	08006514 	.word	0x08006514
 80013b4:	20000228 	.word	0x20000228
 80013b8:	0800651c 	.word	0x0800651c
 80013bc:	20000208 	.word	0x20000208
 80013c0:	08006524 	.word	0x08006524
 80013c4:	0800652c 	.word	0x0800652c
 80013c8:	08006530 	.word	0x08006530
 80013cc:	08006538 	.word	0x08006538

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2228      	movs	r2, #40	; 0x28
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f9f4 	bl	80057cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140e:	2301      	movs	r3, #1
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800141c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	4618      	mov	r0, r3
 8001428:	f002 ff62 	bl	80042f0 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001432:	f000 fa55 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001446:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2102      	movs	r1, #2
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f9ce 	bl	80047f4 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800145e:	f000 fa3f 	bl	80018e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001462:	2302      	movs	r3, #2
 8001464:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fb4e 	bl	8004b10 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800147a:	f000 fa31 	bl	80018e0 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	; 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_ADC1_Init+0xb0>)
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <MX_ADC1_Init+0xb4>)
 800149c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	481c      	ldr	r0, [pc, #112]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014c8:	f000 ff36 	bl	8002338 <HAL_ADC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80014d2:	f000 fa05 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014da:	2301      	movs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_ADC1_Init+0xb0>)
 80014e8:	f001 fa02 	bl	80028f0 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f9f5 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_ADC1_Init+0xb0>)
 8001504:	f001 f9f4 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800150e:	f000 f9e7 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001512:	2303      	movs	r3, #3
 8001514:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001516:	2303      	movs	r3, #3
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_ADC1_Init+0xb0>)
 8001520:	f001 f9e6 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800152a:	f000 f9d9 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000ac 	.word	0x200000ac
 800153c:	40012400 	.word	0x40012400

08001540 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_I2C1_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C1_Init+0x50>)
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_I2C1_Init+0x58>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_I2C1_Init+0x50>)
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C1_Init+0x50>)
 800157e:	f002 f8ed 	bl	800375c <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 f9aa 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000120 	.word	0x20000120
 8001594:	40005400 	.word	0x40005400
 8001598:	00061a80 	.word	0x00061a80

0800159c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_USART1_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f003 fb52 	bl	8004c7c <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f000 f97f 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000174 	.word	0x20000174
 80015ec:	40013800 	.word	0x40013800

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DMA_Init+0x38>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <MX_DMA_Init+0x38>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DMA_Init+0x38>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200b      	movs	r0, #11
 8001614:	f001 fc45 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001618:	200b      	movs	r0, #11
 800161a:	f001 fc5e 	bl	8002eda <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_GPIO_Init+0x58>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_GPIO_Init+0x58>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_GPIO_Init+0x58>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_GPIO_Init+0x58>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <MX_GPIO_Init+0x58>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_GPIO_Init+0x58>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_GPIO_Init+0x58>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <MX_GPIO_Init+0x58>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6193      	str	r3, [r2, #24]
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <MX_GPIO_Init+0x58>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8001690:	4883      	ldr	r0, [pc, #524]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x218>)
 8001692:	f001 f807 	bl	80026a4 <HAL_ADC_Stop_DMA>
	voltage = ((double)readvalue[0]/4095)*36.3;
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe9a 	bl	80003d4 <__aeabi_ui2d>
 80016a0:	a375      	add	r3, pc, #468	; (adr r3, 8001878 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7ff f839 	bl	800071c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	a373      	add	r3, pc, #460	; (adr r3, 8001880 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff06 	bl	80004c8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4979      	ldr	r1, [pc, #484]	; (80018a8 <HAL_ADC_ConvCpltCallback+0x220>)
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
//	VI = (int)voltage;
//	float fractionalPart= voltage - VI;
//	VD = (fractionalPart*100);
//	sprintf(strCopy,"%d.%02d V" ,VI,VD);
	raw_current = (double)readvalue[1]*3.3*2/4095*1.908;
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x21c>)
 80016c8:	885b      	ldrh	r3, [r3, #2]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe82 	bl	80003d4 <__aeabi_ui2d>
 80016d0:	a36d      	add	r3, pc, #436	; (adr r3, 8001888 <HAL_ADC_ConvCpltCallback+0x200>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fef7 	bl	80004c8 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	f7fe fd39 	bl	800015c <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a361      	add	r3, pc, #388	; (adr r3, 8001878 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff f810 	bl	800071c <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	a362      	add	r3, pc, #392	; (adr r3, 8001890 <HAL_ADC_ConvCpltCallback+0x208>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe fedd 	bl	80004c8 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4966      	ldr	r1, [pc, #408]	; (80018ac <HAL_ADC_ConvCpltCallback+0x224>)
 8001714:	e9c1 2300 	strd	r2, r3, [r1]
	current = (raw_current - midvolt)/sensitivity;
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_ADC_ConvCpltCallback+0x224>)
 800171a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800171e:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_ADC_ConvCpltCallback+0x228>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe fd18 	bl	8000158 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_ADC_ConvCpltCallback+0x22c>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fff1 	bl	800071c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	495e      	ldr	r1, [pc, #376]	; (80018b8 <HAL_ADC_ConvCpltCallback+0x230>)
 8001740:	e9c1 2300 	strd	r2, r3, [r1]
//	CI= (int)current;
//	float FractionalPart =  current - VI;
//	CD = (FractionalPart*100);
//	sprintf(strCurr,"%d.%02d C",CI,CD);
	R6 = R5 * (4096.0 / (float)readvalue[2] - 1.0);
 8001744:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_ADC_ConvCpltCallback+0x234>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe65 	bl	8000418 <__aeabi_f2d>
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
 8001752:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001754:	889b      	ldrh	r3, [r3, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa94 	bl	8000c84 <__aeabi_ui2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe5a 	bl	8000418 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	4954      	ldr	r1, [pc, #336]	; (80018c0 <HAL_ADC_ConvCpltCallback+0x238>)
 800176e:	f7fe ffd5 	bl	800071c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001780:	f7fe fcea 	bl	8000158 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fe9c 	bl	80004c8 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f96e 	bl	8000a78 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_ADC_ConvCpltCallback+0x240>)
 80017a0:	6013      	str	r3, [r2, #0]
	logR6 = log(R6);
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_ADC_ConvCpltCallback+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe36 	bl	8000418 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f004 fc9c 	bl	80060f0 <log>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f95a 	bl	8000a78 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a41      	ldr	r2, [pc, #260]	; (80018cc <HAL_ADC_ConvCpltCallback+0x244>)
 80017c8:	6013      	str	r3, [r2, #0]
	T = (1.0 / (c1 + c2 * logR6 + c3 * logR6 * logR6 * logR6));
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_ADC_ConvCpltCallback+0x248>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <HAL_ADC_ConvCpltCallback+0x244>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff faad 	bl	8000d34 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_ADC_ConvCpltCallback+0x24c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7ff f99d 	bl	8000b24 <__addsf3>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461c      	mov	r4, r3
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_ADC_ConvCpltCallback+0x250>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a36      	ldr	r2, [pc, #216]	; (80018cc <HAL_ADC_ConvCpltCallback+0x244>)
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa9b 	bl	8000d34 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_ADC_ConvCpltCallback+0x244>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff fa93 	bl	8000d34 <__aeabi_fmul>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_ADC_ConvCpltCallback+0x244>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f7ff fa8b 	bl	8000d34 <__aeabi_fmul>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff f97e 	bl	8000b24 <__addsf3>
 8001828:	4603      	mov	r3, r0
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001830:	f7ff fb34 	bl	8000e9c <__aeabi_fdiv>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_ADC_ConvCpltCallback+0x254>)
 800183a:	601a      	str	r2, [r3, #0]
	T = T - 273.15;
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_ADC_ConvCpltCallback+0x254>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fde9 	bl	8000418 <__aeabi_f2d>
 8001846:	a314      	add	r3, pc, #80	; (adr r3, 8001898 <HAL_ADC_ConvCpltCallback+0x210>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fc84 	bl	8000158 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f90e 	bl	8000a78 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_ADC_ConvCpltCallback+0x254>)
 8001860:	6013      	str	r3, [r2, #0]
//	TI= (int)T;
//	float FractionPart =  T - TI;
//	TD = (FractionPart*1000);
//	sprintf(strTemp,"%d.%02d C",TI,TD);
//	power = voltage * current;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readvalue,3);
 8001862:	2203      	movs	r2, #3
 8001864:	490f      	ldr	r1, [pc, #60]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x218>)
 8001868:	f000 fe3e 	bl	80024e8 <HAL_ADC_Start_DMA>


}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bdb0      	pop	{r4, r5, r7, pc}
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	40affe00 	.word	0x40affe00
 8001880:	66666666 	.word	0x66666666
 8001884:	40422666 	.word	0x40422666
 8001888:	66666666 	.word	0x66666666
 800188c:	400a6666 	.word	0x400a6666
 8001890:	020c49ba 	.word	0x020c49ba
 8001894:	3ffe872b 	.word	0x3ffe872b
 8001898:	66666666 	.word	0x66666666
 800189c:	40711266 	.word	0x40711266
 80018a0:	200000ac 	.word	0x200000ac
 80018a4:	200001bc 	.word	0x200001bc
 80018a8:	20000220 	.word	0x20000220
 80018ac:	20000230 	.word	0x20000230
 80018b0:	20000018 	.word	0x20000018
 80018b4:	20000010 	.word	0x20000010
 80018b8:	20000238 	.word	0x20000238
 80018bc:	20000020 	.word	0x20000020
 80018c0:	40b00000 	.word	0x40b00000
 80018c4:	3ff00000 	.word	0x3ff00000
 80018c8:	20000244 	.word	0x20000244
 80018cc:	20000240 	.word	0x20000240
 80018d0:	20000028 	.word	0x20000028
 80018d4:	20000024 	.word	0x20000024
 80018d8:	2000002c 	.word	0x2000002c
 80018dc:	20000248 	.word	0x20000248

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018f2:	f000 fa27 	bl	8001d44 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018fa:	2201      	movs	r2, #1
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	485b      	ldr	r0, [pc, #364]	; (8001a6c <SSD1306_Init+0x180>)
 8001900:	f002 f96e 	bl	8003be0 <HAL_I2C_IsDeviceReady>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800190a:	2300      	movs	r3, #0
 800190c:	e0a9      	b.n	8001a62 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800190e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001912:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001914:	e002      	b.n	800191c <SSD1306_Init+0x30>
		p--;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3b01      	subs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001922:	22ae      	movs	r2, #174	; 0xae
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 fa86 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800192c:	2220      	movs	r2, #32
 800192e:	2100      	movs	r1, #0
 8001930:	2078      	movs	r0, #120	; 0x78
 8001932:	f000 fa81 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001936:	2210      	movs	r2, #16
 8001938:	2100      	movs	r1, #0
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 fa7c 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001940:	22b0      	movs	r2, #176	; 0xb0
 8001942:	2100      	movs	r1, #0
 8001944:	2078      	movs	r0, #120	; 0x78
 8001946:	f000 fa77 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800194a:	22c8      	movs	r2, #200	; 0xc8
 800194c:	2100      	movs	r1, #0
 800194e:	2078      	movs	r0, #120	; 0x78
 8001950:	f000 fa72 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2078      	movs	r0, #120	; 0x78
 800195a:	f000 fa6d 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800195e:	2210      	movs	r2, #16
 8001960:	2100      	movs	r1, #0
 8001962:	2078      	movs	r0, #120	; 0x78
 8001964:	f000 fa68 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	2100      	movs	r1, #0
 800196c:	2078      	movs	r0, #120	; 0x78
 800196e:	f000 fa63 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001972:	2281      	movs	r2, #129	; 0x81
 8001974:	2100      	movs	r1, #0
 8001976:	2078      	movs	r0, #120	; 0x78
 8001978:	f000 fa5e 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800197c:	22ff      	movs	r2, #255	; 0xff
 800197e:	2100      	movs	r1, #0
 8001980:	2078      	movs	r0, #120	; 0x78
 8001982:	f000 fa59 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001986:	22a1      	movs	r2, #161	; 0xa1
 8001988:	2100      	movs	r1, #0
 800198a:	2078      	movs	r0, #120	; 0x78
 800198c:	f000 fa54 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001990:	22a6      	movs	r2, #166	; 0xa6
 8001992:	2100      	movs	r1, #0
 8001994:	2078      	movs	r0, #120	; 0x78
 8001996:	f000 fa4f 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800199a:	22a8      	movs	r2, #168	; 0xa8
 800199c:	2100      	movs	r1, #0
 800199e:	2078      	movs	r0, #120	; 0x78
 80019a0:	f000 fa4a 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	2100      	movs	r1, #0
 80019a8:	2078      	movs	r0, #120	; 0x78
 80019aa:	f000 fa45 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019ae:	22a4      	movs	r2, #164	; 0xa4
 80019b0:	2100      	movs	r1, #0
 80019b2:	2078      	movs	r0, #120	; 0x78
 80019b4:	f000 fa40 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019b8:	22d3      	movs	r2, #211	; 0xd3
 80019ba:	2100      	movs	r1, #0
 80019bc:	2078      	movs	r0, #120	; 0x78
 80019be:	f000 fa3b 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2078      	movs	r0, #120	; 0x78
 80019c8:	f000 fa36 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019cc:	22d5      	movs	r2, #213	; 0xd5
 80019ce:	2100      	movs	r1, #0
 80019d0:	2078      	movs	r0, #120	; 0x78
 80019d2:	f000 fa31 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019d6:	22f0      	movs	r2, #240	; 0xf0
 80019d8:	2100      	movs	r1, #0
 80019da:	2078      	movs	r0, #120	; 0x78
 80019dc:	f000 fa2c 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019e0:	22d9      	movs	r2, #217	; 0xd9
 80019e2:	2100      	movs	r1, #0
 80019e4:	2078      	movs	r0, #120	; 0x78
 80019e6:	f000 fa27 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019ea:	2222      	movs	r2, #34	; 0x22
 80019ec:	2100      	movs	r1, #0
 80019ee:	2078      	movs	r0, #120	; 0x78
 80019f0:	f000 fa22 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019f4:	22da      	movs	r2, #218	; 0xda
 80019f6:	2100      	movs	r1, #0
 80019f8:	2078      	movs	r0, #120	; 0x78
 80019fa:	f000 fa1d 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019fe:	2212      	movs	r2, #18
 8001a00:	2100      	movs	r1, #0
 8001a02:	2078      	movs	r0, #120	; 0x78
 8001a04:	f000 fa18 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a08:	22db      	movs	r2, #219	; 0xdb
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2078      	movs	r0, #120	; 0x78
 8001a0e:	f000 fa13 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a12:	2220      	movs	r2, #32
 8001a14:	2100      	movs	r1, #0
 8001a16:	2078      	movs	r0, #120	; 0x78
 8001a18:	f000 fa0e 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a1c:	228d      	movs	r2, #141	; 0x8d
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2078      	movs	r0, #120	; 0x78
 8001a22:	f000 fa09 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a26:	2214      	movs	r2, #20
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2078      	movs	r0, #120	; 0x78
 8001a2c:	f000 fa04 	bl	8001e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a30:	22af      	movs	r2, #175	; 0xaf
 8001a32:	2100      	movs	r1, #0
 8001a34:	2078      	movs	r0, #120	; 0x78
 8001a36:	f000 f9ff 	bl	8001e38 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a3a:	222e      	movs	r2, #46	; 0x2e
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2078      	movs	r0, #120	; 0x78
 8001a40:	f000 f9fa 	bl	8001e38 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 f843 	bl	8001ad0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001a4a:	f000 f813 	bl	8001a74 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <SSD1306_Init+0x184>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SSD1306_Init+0x184>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SSD1306_Init+0x184>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000120 	.word	0x20000120
 8001a70:	2000064c 	.word	0x2000064c

08001a74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e01d      	b.n	8001abc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	3b50      	subs	r3, #80	; 0x50
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	; 0x78
 8001a8c:	f000 f9d4 	bl	8001e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	; 0x78
 8001a96:	f000 f9cf 	bl	8001e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	; 0x78
 8001aa0:	f000 f9ca 	bl	8001e38 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	01db      	lsls	r3, r3, #7
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <SSD1306_UpdateScreen+0x58>)
 8001aaa:	441a      	add	r2, r3
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	2078      	movs	r0, #120	; 0x78
 8001ab2:	f000 f95b 	bl	8001d6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d9de      	bls.n	8001a80 <SSD1306_UpdateScreen+0xc>
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000024c 	.word	0x2000024c

08001ad0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <SSD1306_Fill+0x14>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <SSD1306_Fill+0x16>
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	4619      	mov	r1, r3
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <SSD1306_Fill+0x2c>)
 8001aee:	f003 fe6d 	bl	80057cc <memset>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000024c 	.word	0x2000024c

08001b00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	80bb      	strh	r3, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	70fb      	strb	r3, [r7, #3]
	if (
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b7f      	cmp	r3, #127	; 0x7f
 8001b16:	d848      	bhi.n	8001baa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b1c:	d845      	bhi.n	8001baa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <SSD1306_DrawPixel+0xb4>)
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d11a      	bne.n	8001b70 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	b298      	uxth	r0, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	01db      	lsls	r3, r3, #7
 8001b46:	4413      	add	r3, r2
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <SSD1306_DrawPixel+0xb8>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b259      	sxtb	r1, r3
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	4603      	mov	r3, r0
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	4413      	add	r3, r2
 8001b68:	b2c9      	uxtb	r1, r1
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <SSD1306_DrawPixel+0xb8>)
 8001b6c:	54d1      	strb	r1, [r2, r3]
 8001b6e:	e01d      	b.n	8001bac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	88bb      	ldrh	r3, [r7, #4]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	b298      	uxth	r0, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <SSD1306_DrawPixel+0xb8>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	4013      	ands	r3, r2
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2c9      	uxtb	r1, r1
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <SSD1306_DrawPixel+0xb8>)
 8001ba6:	54d1      	strb	r1, [r2, r3]
 8001ba8:	e000      	b.n	8001bac <SSD1306_DrawPixel+0xac>
		return;
 8001baa:	bf00      	nop
	}
}
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	2000064c 	.word	0x2000064c
 8001bb8:	2000024c 	.word	0x2000024c

08001bbc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	80fb      	strh	r3, [r7, #6]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SSD1306_GotoXY+0x28>)
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <SSD1306_GotoXY+0x28>)
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	8053      	strh	r3, [r2, #2]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000064c 	.word	0x2000064c

08001be8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
	if (
 8001c04:	2b7f      	cmp	r3, #127	; 0x7f
 8001c06:	dc07      	bgt.n	8001c18 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c08:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001c0a:	885b      	ldrh	r3, [r3, #2]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	785b      	ldrb	r3, [r3, #1]
 8001c12:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c14:	2b3f      	cmp	r3, #63	; 0x3f
 8001c16:	dd01      	ble.n	8001c1c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e05e      	b.n	8001cda <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e04b      	b.n	8001cba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3b20      	subs	r3, #32
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	7849      	ldrb	r1, [r1, #1]
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	440b      	add	r3, r1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e030      	b.n	8001ca8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b298      	uxth	r0, r3
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001c64:	885a      	ldrh	r2, [r3, #2]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	79ba      	ldrb	r2, [r7, #6]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7ff ff45 	bl	8001b00 <SSD1306_DrawPixel>
 8001c76:	e014      	b.n	8001ca2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	b298      	uxth	r0, r3
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001c86:	885a      	ldrh	r2, [r3, #2]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f7ff ff2f 	bl	8001b00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d3c8      	bcc.n	8001c46 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	785b      	ldrb	r3, [r3, #1]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d3ad      	bcc.n	8001c22 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <SSD1306_Putc+0xfc>)
 8001cd6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000064c 	.word	0x2000064c

08001ce8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001cf6:	e012      	b.n	8001d1e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff71 	bl	8001be8 <SSD1306_Putc>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d002      	beq.n	8001d18 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	e008      	b.n	8001d2a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e8      	bne.n	8001cf8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff feca 	bl	8001ad0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d3c:	f7ff fe9a 	bl	8001a74 <SSD1306_UpdateScreen>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <ssd1306_I2C_Init+0x24>)
 8001d4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d4e:	e002      	b.n	8001d56 <ssd1306_I2C_Init+0x12>
		p--;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f9      	bne.n	8001d50 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	0003d090 	.word	0x0003d090

08001d6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b0c7      	sub	sp, #284	; 0x11c
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d7a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d7e:	600a      	str	r2, [r1, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d92:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d96:	4602      	mov	r2, r0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001da2:	460a      	mov	r2, r1
 8001da4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001db2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001dc0:	e015      	b.n	8001dee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	441a      	add	r2, r3
 8001dd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	7811      	ldrb	r1, [r2, #0]
 8001dda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dde:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001de2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001de4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001de8:	3301      	adds	r3, #1
 8001dea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001dee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001df8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d8df      	bhi.n	8001dc2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e06:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b299      	uxth	r1, r3
 8001e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f107 020c 	add.w	r2, r7, #12
 8001e20:	200a      	movs	r0, #10
 8001e22:	9000      	str	r0, [sp, #0]
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e26:	f001 fddd 	bl	80039e4 <HAL_I2C_Master_Transmit>
}
 8001e2a:	bf00      	nop
 8001e2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	20000120 	.word	0x20000120

08001e38 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	460b      	mov	r3, r1
 8001e44:	71bb      	strb	r3, [r7, #6]
 8001e46:	4613      	mov	r3, r2
 8001e48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	b299      	uxth	r1, r3
 8001e56:	f107 020c 	add.w	r2, r7, #12
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2302      	movs	r3, #2
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <ssd1306_I2C_Write+0x38>)
 8001e62:	f001 fdbf 	bl	80039e4 <HAL_I2C_Master_Transmit>
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000120 	.word	0x20000120

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6193      	str	r3, [r2, #24]
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_MspInit+0x60>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_MspInit+0x60>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <HAL_ADC_MspInit+0xcc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d151      	bne.n	8001f9c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_ADC_MspInit+0xd0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f28:	230e      	movs	r3, #14
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4619      	mov	r1, r3
 8001f36:	481d      	ldr	r0, [pc, #116]	; (8001fac <HAL_ADC_MspInit+0xd4>)
 8001f38:	f001 fa8c 	bl	8003454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_ADC_MspInit+0xdc>)
 8001f40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f66:	2220      	movs	r2, #32
 8001f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f72:	f000 ffcd 	bl	8002f10 <HAL_DMA_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001f7c:	f7ff fcb0 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f84:	621a      	str	r2, [r3, #32]
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_ADC_MspInit+0xd8>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2012      	movs	r0, #18
 8001f92:	f000 ff86 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f96:	2012      	movs	r0, #18
 8001f98:	f000 ff9f 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40012400 	.word	0x40012400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	200000dc 	.word	0x200000dc
 8001fb4:	40020008 	.word	0x40020008

08001fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a15      	ldr	r2, [pc, #84]	; (8002028 <HAL_I2C_MspInit+0x70>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d123      	bne.n	8002020 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_I2C_MspInit+0x74>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_I2C_MspInit+0x74>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_I2C_MspInit+0x74>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff0:	23c0      	movs	r3, #192	; 0xc0
 8001ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_I2C_MspInit+0x78>)
 8002004:	f001 fa26 	bl	8003454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_I2C_MspInit+0x74>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_I2C_MspInit+0x74>)
 800200e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002012:	61d3      	str	r3, [r2, #28]
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_I2C_MspInit+0x74>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40005400 	.word	0x40005400
 800202c:	40021000 	.word	0x40021000
 8002030:	40010c00 	.word	0x40010c00

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d139      	bne.n	80020c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4619      	mov	r1, r3
 8002098:	480f      	ldr	r0, [pc, #60]	; (80020d8 <HAL_UART_MspInit+0xa4>)
 800209a:	f001 f9db 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800209e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <HAL_UART_MspInit+0xa4>)
 80020b4:	f001 f9ce 	bl	8003454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2025      	movs	r0, #37	; 0x25
 80020be:	f000 fef0 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c2:	2025      	movs	r0, #37	; 0x25
 80020c4:	f000 ff09 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010800 	.word	0x40010800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002122:	f000 f8c9 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <DMA1_Channel1_IRQHandler+0x10>)
 8002132:	f001 f85b 	bl	80031ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200000dc 	.word	0x200000dc

08002140 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <ADC1_2_IRQHandler+0x10>)
 8002146:	f000 faf9 	bl	800273c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200000ac 	.word	0x200000ac

08002154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART1_IRQHandler+0x10>)
 800215a:	f002 fe05 	bl	8004d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000174 	.word	0x20000174

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f003 fb20 	bl	80057dc <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20005000 	.word	0x20005000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	20000654 	.word	0x20000654
 80021d0:	200007a8 	.word	0x200007a8

080021d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e0:	f7ff fff8 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021e6:	490c      	ldr	r1, [pc, #48]	; (8002218 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <LoopFillZerobss+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021fc:	4c09      	ldr	r4, [pc, #36]	; (8002224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220a:	f003 faed 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220e:	f7fe ff3f 	bl	8001090 <main>
  bx lr
 8002212:	4770      	bx	lr
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800221c:	08007a6c 	.word	0x08007a6c
  ldr r2, =_sbss
 8002220:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002224:	200007a4 	.word	0x200007a4

08002228 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <CAN1_RX1_IRQHandler>
	...

0800222c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_Init+0x28>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_Init+0x28>)
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 fe25 	bl	8002e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	200f      	movs	r0, #15
 8002244:	f000 f808 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fe14 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40022000 	.word	0x40022000

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fe3d 	bl	8002ef6 <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f000 fe05 	bl	8002ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000030 	.word	0x20000030
 80022b0:	20000038 	.word	0x20000038
 80022b4:	20000034 	.word	0x20000034

080022b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_IncTick+0x1c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x20>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_IncTick+0x20>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000038 	.word	0x20000038
 80022d8:	20000658 	.word	0x20000658

080022dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_GetTick+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000658 	.word	0x20000658

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fff0 	bl	80022dc <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffe0 	bl	80022dc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000038 	.word	0x20000038

08002338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0be      	b.n	80024d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fdae 	bl	8001ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fc09 	bl	8002b94 <ADC_ConversionStop_Disable>
 8002382:	4603      	mov	r3, r0
 8002384:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8099 	bne.w	80024c6 <HAL_ADC_Init+0x18e>
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8095 	bne.w	80024c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023a4:	f023 0302 	bic.w	r3, r3, #2
 80023a8:	f043 0202 	orr.w	r2, r3, #2
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7b1b      	ldrb	r3, [r3, #12]
 80023be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d003      	beq.n	80023da <HAL_ADC_Init+0xa2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_ADC_Init+0xa8>
 80023da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023de:	e000      	b.n	80023e2 <HAL_ADC_Init+0xaa>
 80023e0:	2300      	movs	r3, #0
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7d1b      	ldrb	r3, [r3, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d119      	bne.n	8002424 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7b1b      	ldrb	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	035a      	lsls	r2, r3, #13
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e00b      	b.n	8002424 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_ADC_Init+0x1a8>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	430b      	orrs	r3, r1
 800244a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002454:	d003      	beq.n	800245e <HAL_ADC_Init+0x126>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d104      	bne.n	8002468 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	3b01      	subs	r3, #1
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	430a      	orrs	r2, r1
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_ADC_Init+0x1ac>)
 8002484:	4013      	ands	r3, r2
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d10b      	bne.n	80024a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024a2:	e018      	b.n	80024d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f023 0312 	bic.w	r3, r3, #18
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024c4:	e007      	b.n	80024d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	ffe1f7fd 	.word	0xffe1f7fd
 80024e4:	ff1f0efe 	.word	0xff1f0efe

080024e8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a64      	ldr	r2, [pc, #400]	; (8002690 <HAL_ADC_Start_DMA+0x1a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_Start_DMA+0x24>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a63      	ldr	r2, [pc, #396]	; (8002694 <HAL_ADC_Start_DMA+0x1ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d106      	bne.n	800251a <HAL_ADC_Start_DMA+0x32>
 800250c:	4b60      	ldr	r3, [pc, #384]	; (8002690 <HAL_ADC_Start_DMA+0x1a8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 80b3 	bne.w	8002680 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_Start_DMA+0x40>
 8002524:	2302      	movs	r3, #2
 8002526:	e0ae      	b.n	8002686 <HAL_ADC_Start_DMA+0x19e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fad5 	bl	8002ae0 <ADC_Enable>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 809a 	bne.w	8002676 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_ADC_Start_DMA+0x1ac>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d105      	bne.n	800256c <HAL_ADC_Start_DMA+0x84>
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_ADC_Start_DMA+0x1a8>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d115      	bne.n	8002598 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d026      	beq.n	80025d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800258e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002596:	e01d      	b.n	80025d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a39      	ldr	r2, [pc, #228]	; (8002690 <HAL_ADC_Start_DMA+0x1a8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xd0>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a38      	ldr	r2, [pc, #224]	; (8002694 <HAL_ADC_Start_DMA+0x1ac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10d      	bne.n	80025d4 <HAL_ADC_Start_DMA+0xec>
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_ADC_Start_DMA+0x1a8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f023 0206 	bic.w	r2, r3, #6
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_ADC_Start_DMA+0x1b0>)
 8002602:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_ADC_Start_DMA+0x1b4>)
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a23      	ldr	r2, [pc, #140]	; (80026a0 <HAL_ADC_Start_DMA+0x1b8>)
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0202 	mvn.w	r2, #2
 800261c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a18      	ldr	r0, [r3, #32]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	334c      	adds	r3, #76	; 0x4c
 8002638:	4619      	mov	r1, r3
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f000 fcc1 	bl	8002fc4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800264c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002650:	d108      	bne.n	8002664 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002660:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002662:	e00f      	b.n	8002684 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002672:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002674:	e006      	b.n	8002684 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800267e:	e001      	b.n	8002684 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40012400 	.word	0x40012400
 8002694:	40012800 	.word	0x40012800
 8002698:	08002c17 	.word	0x08002c17
 800269c:	08002c93 	.word	0x08002c93
 80026a0:	08002caf 	.word	0x08002caf

080026a4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Stop_DMA+0x1a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e03a      	b.n	8002734 <HAL_ADC_Stop_DMA+0x90>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa64 	bl	8002b94 <ADC_ConversionStop_Disable>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d129      	bne.n	800272a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e4:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d11a      	bne.n	800272a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fcc3 	bl	8003084 <HAL_DMA_Abort>
 80026fe:	4603      	mov	r3, r0
 8002700:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
 800271c:	e005      	b.n	800272a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d03e      	beq.n	80027dc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d039      	beq.n	80027dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800278a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800278e:	d11d      	bne.n	80027cc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0220 	bic.w	r2, r2, #32
 80027a6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe ff5b 	bl	8001688 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0212 	mvn.w	r2, #18
 80027da:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d04d      	beq.n	8002882 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d048      	beq.n	8002882 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002812:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002816:	d012      	beq.n	800283e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002822:	2b00      	cmp	r3, #0
 8002824:	d125      	bne.n	8002872 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002830:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002834:	d11d      	bne.n	8002872 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa35 	bl	8002ce2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 020c 	mvn.w	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f812 	bl	80028cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0201 	mvn.w	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x20>
 800290c:	2302      	movs	r3, #2
 800290e:	e0dc      	b.n	8002aca <HAL_ADC_ConfigChannel+0x1da>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b06      	cmp	r3, #6
 800291e:	d81c      	bhi.n	800295a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b05      	subs	r3, #5
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b05      	subs	r3, #5
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34
 8002958:	e03c      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d81c      	bhi.n	800299c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b23      	subs	r3, #35	; 0x23
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	4019      	ands	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b23      	subs	r3, #35	; 0x23
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
 800299a:	e01b      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b41      	subs	r3, #65	; 0x41
 80029ae:	221f      	movs	r2, #31
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b41      	subs	r3, #65	; 0x41
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d91c      	bls.n	8002a16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e019      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6919      	ldr	r1, [r3, #16]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	2207      	movs	r2, #7
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4019      	ands	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a56:	2b11      	cmp	r3, #17
 8002a58:	d132      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1ec>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012400 	.word	0x40012400
 8002ad8:	20000030 	.word	0x20000030
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d040      	beq.n	8002b80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <ADC_Enable+0xac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <ADC_Enable+0xb0>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b1c:	e002      	b.n	8002b24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fbd7 	bl	80022dc <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b30:	e01f      	b.n	8002b72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b32:	f7ff fbd3 	bl	80022dc <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d918      	bls.n	8002b72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d011      	beq.n	8002b72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d1d8      	bne.n	8002b32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000030 	.word	0x20000030
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12e      	bne.n	8002c0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bbe:	f7ff fb8d 	bl	80022dc <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc4:	e01b      	b.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bc6:	f7ff fb89 	bl	80022dc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d914      	bls.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10d      	bne.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d0dc      	beq.n	8002bc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d127      	bne.n	8002c80 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c4a:	d115      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7fe fd05 	bl	8001688 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c7e:	e004      	b.n	8002c8a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fe0a 	bl	80028ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe02 	bl	80028de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4906      	ldr	r1, [pc, #24]	; (8002d8c <__NVIC_EnableIRQ+0x34>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	; (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e58:	d301      	bcc.n	8002e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00f      	b.n	8002e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <SysTick_Config+0x40>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e66:	210f      	movs	r1, #15
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	f7ff ff90 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <SysTick_Config+0x40>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <SysTick_Config+0x40>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff2d 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb4:	f7ff ff42 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f7ff ff90 	bl	8002de4 <NVIC_EncodePriority>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff5f 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff35 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffa2 	bl	8002e48 <SysTick_Config>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e043      	b.n	8002fae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_DMA_Init+0xa8>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_DMA_Init+0xac>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	009a      	lsls	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_DMA_Init+0xb0>)
 8002f42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	bffdfff8 	.word	0xbffdfff8
 8002fbc:	cccccccd 	.word	0xcccccccd
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Start_IT+0x20>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e04b      	b.n	800307c <HAL_DMA_Start_IT+0xb8>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d13a      	bne.n	800306e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f9eb 	bl	80033f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 020e 	orr.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00f      	b.n	800305c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 020a 	orr.w	r2, r2, #10
 800305a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e005      	b.n	800307a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e020      	b.n	80030f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 020e 	bic.w	r2, r2, #14
 80030bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d005      	beq.n	8003120 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2204      	movs	r2, #4
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e051      	b.n	80031c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 020e 	bic.w	r2, r2, #14
 800312e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_DMA_Abort_IT+0xd4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d029      	beq.n	800319e <HAL_DMA_Abort_IT+0xa2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_DMA_Abort_IT+0xd8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <HAL_DMA_Abort_IT+0x9e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_DMA_Abort_IT+0xdc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01a      	beq.n	8003194 <HAL_DMA_Abort_IT+0x98>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_DMA_Abort_IT+0xe0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d012      	beq.n	800318e <HAL_DMA_Abort_IT+0x92>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_DMA_Abort_IT+0xe4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00a      	beq.n	8003188 <HAL_DMA_Abort_IT+0x8c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_DMA_Abort_IT+0xe8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_DMA_Abort_IT+0x86>
 800317c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003180:	e00e      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 8003182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003186:	e00b      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 8003188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318c:	e008      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003192:	e005      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 8003194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003198:	e002      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 800319a:	2310      	movs	r3, #16
 800319c:	e000      	b.n	80031a0 <HAL_DMA_Abort_IT+0xa4>
 800319e:	2301      	movs	r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_DMA_Abort_IT+0xec>)
 80031a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
    } 
  }
  return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40020008 	.word	0x40020008
 80031d4:	4002001c 	.word	0x4002001c
 80031d8:	40020030 	.word	0x40020030
 80031dc:	40020044 	.word	0x40020044
 80031e0:	40020058 	.word	0x40020058
 80031e4:	4002006c 	.word	0x4002006c
 80031e8:	40020000 	.word	0x40020000

080031ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d04f      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xc8>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_DMA_IRQHandler+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d029      	beq.n	800329a <HAL_DMA_IRQHandler+0xae>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_DMA_IRQHandler+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_IRQHandler+0xaa>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01a      	beq.n	8003290 <HAL_DMA_IRQHandler+0xa4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d012      	beq.n	800328a <HAL_DMA_IRQHandler+0x9e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_DMA_IRQHandler+0x200>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00a      	beq.n	8003284 <HAL_DMA_IRQHandler+0x98>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_DMA_IRQHandler+0x204>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d102      	bne.n	800327e <HAL_DMA_IRQHandler+0x92>
 8003278:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800327c:	e00e      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 800327e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003282:	e00b      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 8003284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003288:	e008      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 800328a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800328e:	e005      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 8003290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003294:	e002      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	e000      	b.n	800329c <HAL_DMA_IRQHandler+0xb0>
 800329a:	2304      	movs	r3, #4
 800329c:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_DMA_IRQHandler+0x208>)
 800329e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8094 	beq.w	80033d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	e08e      	b.n	80033d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2202      	movs	r2, #2
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d056      	beq.n	8003372 <HAL_DMA_IRQHandler+0x186>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d051      	beq.n	8003372 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 020a 	bic.w	r2, r2, #10
 80032ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a38      	ldr	r2, [pc, #224]	; (80033dc <HAL_DMA_IRQHandler+0x1f0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d029      	beq.n	8003352 <HAL_DMA_IRQHandler+0x166>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a37      	ldr	r2, [pc, #220]	; (80033e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMA_IRQHandler+0x162>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <HAL_DMA_IRQHandler+0x1f8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01a      	beq.n	8003348 <HAL_DMA_IRQHandler+0x15c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d012      	beq.n	8003342 <HAL_DMA_IRQHandler+0x156>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a32      	ldr	r2, [pc, #200]	; (80033ec <HAL_DMA_IRQHandler+0x200>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00a      	beq.n	800333c <HAL_DMA_IRQHandler+0x150>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a31      	ldr	r2, [pc, #196]	; (80033f0 <HAL_DMA_IRQHandler+0x204>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_DMA_IRQHandler+0x14a>
 8003330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003334:	e00e      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	e00b      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 800333c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003340:	e008      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 8003342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003346:	e005      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 8003348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334c:	e002      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 800334e:	2320      	movs	r3, #32
 8003350:	e000      	b.n	8003354 <HAL_DMA_IRQHandler+0x168>
 8003352:	2302      	movs	r3, #2
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_DMA_IRQHandler+0x208>)
 8003356:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d034      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003370:	e02f      	b.n	80033d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2208      	movs	r2, #8
 8003378:	409a      	lsls	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d028      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x1e8>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d023      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020e 	bic.w	r2, r2, #14
 800339a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f202 	lsl.w	r2, r1, r2
 80033aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
    }
  }
  return;
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
}
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40020008 	.word	0x40020008
 80033e0:	4002001c 	.word	0x4002001c
 80033e4:	40020030 	.word	0x40020030
 80033e8:	40020044 	.word	0x40020044
 80033ec:	40020058 	.word	0x40020058
 80033f0:	4002006c 	.word	0x4002006c
 80033f4:	40020000 	.word	0x40020000

080033f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b10      	cmp	r3, #16
 8003424:	d108      	bne.n	8003438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003436:	e007      	b.n	8003448 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
	...

08003454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b08b      	sub	sp, #44	; 0x2c
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003466:	e169      	b.n	800373c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003468:	2201      	movs	r2, #1
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	429a      	cmp	r2, r3
 8003482:	f040 8158 	bne.w	8003736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a9a      	ldr	r2, [pc, #616]	; (80036f4 <HAL_GPIO_Init+0x2a0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 8003490:	4a98      	ldr	r2, [pc, #608]	; (80036f4 <HAL_GPIO_Init+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d875      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 8003496:	4a98      	ldr	r2, [pc, #608]	; (80036f8 <HAL_GPIO_Init+0x2a4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d058      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 800349c:	4a96      	ldr	r2, [pc, #600]	; (80036f8 <HAL_GPIO_Init+0x2a4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d86f      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034a2:	4a96      	ldr	r2, [pc, #600]	; (80036fc <HAL_GPIO_Init+0x2a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d052      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034a8:	4a94      	ldr	r2, [pc, #592]	; (80036fc <HAL_GPIO_Init+0x2a8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d869      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ae:	4a94      	ldr	r2, [pc, #592]	; (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04c      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034b4:	4a92      	ldr	r2, [pc, #584]	; (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d863      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ba:	4a92      	ldr	r2, [pc, #584]	; (8003704 <HAL_GPIO_Init+0x2b0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d046      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034c0:	4a90      	ldr	r2, [pc, #576]	; (8003704 <HAL_GPIO_Init+0x2b0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d85d      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d82a      	bhi.n	8003520 <HAL_GPIO_Init+0xcc>
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d859      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_GPIO_Init+0x80>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	0800354f 	.word	0x0800354f
 80034d8:	08003529 	.word	0x08003529
 80034dc:	0800353b 	.word	0x0800353b
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	08003583 	.word	0x08003583
 80034e8:	08003583 	.word	0x08003583
 80034ec:	08003583 	.word	0x08003583
 80034f0:	08003583 	.word	0x08003583
 80034f4:	08003583 	.word	0x08003583
 80034f8:	08003583 	.word	0x08003583
 80034fc:	08003583 	.word	0x08003583
 8003500:	08003583 	.word	0x08003583
 8003504:	08003583 	.word	0x08003583
 8003508:	08003583 	.word	0x08003583
 800350c:	08003583 	.word	0x08003583
 8003510:	08003583 	.word	0x08003583
 8003514:	08003583 	.word	0x08003583
 8003518:	08003531 	.word	0x08003531
 800351c:	08003545 	.word	0x08003545
 8003520:	4a79      	ldr	r2, [pc, #484]	; (8003708 <HAL_GPIO_Init+0x2b4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003526:	e02c      	b.n	8003582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e029      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	623b      	str	r3, [r7, #32]
          break;
 8003538:	e024      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	3308      	adds	r3, #8
 8003540:	623b      	str	r3, [r7, #32]
          break;
 8003542:	e01f      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	330c      	adds	r3, #12
 800354a:	623b      	str	r3, [r7, #32]
          break;
 800354c:	e01a      	b.n	8003584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003556:	2304      	movs	r3, #4
 8003558:	623b      	str	r3, [r7, #32]
          break;
 800355a:	e013      	b.n	8003584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003564:	2308      	movs	r3, #8
 8003566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	611a      	str	r2, [r3, #16]
          break;
 800356e:	e009      	b.n	8003584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003570:	2308      	movs	r3, #8
 8003572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	615a      	str	r2, [r3, #20]
          break;
 800357a:	e003      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
          break;
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x130>
          break;
 8003582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d801      	bhi.n	800358e <HAL_GPIO_Init+0x13a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	e001      	b.n	8003592 <HAL_GPIO_Init+0x13e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2bff      	cmp	r3, #255	; 0xff
 8003598:	d802      	bhi.n	80035a0 <HAL_GPIO_Init+0x14c>
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x152>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	3b08      	subs	r3, #8
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	210f      	movs	r1, #15
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	431a      	orrs	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b1 	beq.w	8003736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_GPIO_Init+0x2b8>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	; (800370c <HAL_GPIO_Init+0x2b8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6193      	str	r3, [r2, #24]
 80035e0:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_GPIO_Init+0x2b8>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035ec:	4a48      	ldr	r2, [pc, #288]	; (8003710 <HAL_GPIO_Init+0x2bc>)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <HAL_GPIO_Init+0x2c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_GPIO_Init+0x1ec>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3f      	ldr	r2, [pc, #252]	; (8003718 <HAL_GPIO_Init+0x2c4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00d      	beq.n	800363c <HAL_GPIO_Init+0x1e8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3e      	ldr	r2, [pc, #248]	; (800371c <HAL_GPIO_Init+0x2c8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d007      	beq.n	8003638 <HAL_GPIO_Init+0x1e4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3d      	ldr	r2, [pc, #244]	; (8003720 <HAL_GPIO_Init+0x2cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_GPIO_Init+0x1e0>
 8003630:	2303      	movs	r3, #3
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003634:	2304      	movs	r3, #4
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003640:	2300      	movs	r3, #0
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003652:	492f      	ldr	r1, [pc, #188]	; (8003710 <HAL_GPIO_Init+0x2bc>)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	492c      	ldr	r1, [pc, #176]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	4928      	ldr	r1, [pc, #160]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4922      	ldr	r1, [pc, #136]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	491e      	ldr	r1, [pc, #120]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4918      	ldr	r1, [pc, #96]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4914      	ldr	r1, [pc, #80]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e021      	b.n	8003736 <HAL_GPIO_Init+0x2e2>
 80036f2:	bf00      	nop
 80036f4:	10320000 	.word	0x10320000
 80036f8:	10310000 	.word	0x10310000
 80036fc:	10220000 	.word	0x10220000
 8003700:	10210000 	.word	0x10210000
 8003704:	10120000 	.word	0x10120000
 8003708:	10110000 	.word	0x10110000
 800370c:	40021000 	.word	0x40021000
 8003710:	40010000 	.word	0x40010000
 8003714:	40010800 	.word	0x40010800
 8003718:	40010c00 	.word	0x40010c00
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_GPIO_Init+0x304>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	43db      	mvns	r3, r3
 8003730:	4909      	ldr	r1, [pc, #36]	; (8003758 <HAL_GPIO_Init+0x304>)
 8003732:	4013      	ands	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	3301      	adds	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	f47f ae8e 	bne.w	8003468 <HAL_GPIO_Init+0x14>
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	372c      	adds	r7, #44	; 0x2c
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e12b      	b.n	80039c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fe fc18 	bl	8001fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c0:	f001 f960 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80037c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a81      	ldr	r2, [pc, #516]	; (80039d0 <HAL_I2C_Init+0x274>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d807      	bhi.n	80037e0 <HAL_I2C_Init+0x84>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a80      	ldr	r2, [pc, #512]	; (80039d4 <HAL_I2C_Init+0x278>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e006      	b.n	80037ee <HAL_I2C_Init+0x92>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a7d      	ldr	r2, [pc, #500]	; (80039d8 <HAL_I2C_Init+0x27c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0e7      	b.n	80039c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a78      	ldr	r2, [pc, #480]	; (80039dc <HAL_I2C_Init+0x280>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0c9b      	lsrs	r3, r3, #18
 8003800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_I2C_Init+0x274>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d802      	bhi.n	8003830 <HAL_I2C_Init+0xd4>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	e009      	b.n	8003844 <HAL_I2C_Init+0xe8>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_I2C_Init+0x284>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	3301      	adds	r3, #1
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	495c      	ldr	r1, [pc, #368]	; (80039d0 <HAL_I2C_Init+0x274>)
 8003860:	428b      	cmp	r3, r1
 8003862:	d819      	bhi.n	8003898 <HAL_I2C_Init+0x13c>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e59      	subs	r1, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003878:	400b      	ands	r3, r1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_I2C_Init+0x138>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e59      	subs	r1, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fbb1 f3f3 	udiv	r3, r1, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	e051      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003894:	2304      	movs	r3, #4
 8003896:	e04f      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d111      	bne.n	80038c4 <HAL_I2C_Init+0x168>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e012      	b.n	80038ea <HAL_I2C_Init+0x18e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e58      	subs	r0, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	0099      	lsls	r1, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Init+0x196>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e022      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10e      	bne.n	8003918 <HAL_I2C_Init+0x1bc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1e58      	subs	r0, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	440b      	add	r3, r1
 8003908:	fbb0 f3f3 	udiv	r3, r0, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003916:	e00f      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6809      	ldr	r1, [r1, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6911      	ldr	r1, [r2, #16]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	4311      	orrs	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	430b      	orrs	r3, r1
 800397a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	000186a0 	.word	0x000186a0
 80039d4:	001e847f 	.word	0x001e847f
 80039d8:	003d08ff 	.word	0x003d08ff
 80039dc:	431bde83 	.word	0x431bde83
 80039e0:	10624dd3 	.word	0x10624dd3

080039e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
 80039f4:	4613      	mov	r3, r2
 80039f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7fe fc70 	bl	80022dc <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	f040 80e0 	bne.w	8003bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2319      	movs	r3, #25
 8003a12:	2201      	movs	r2, #1
 8003a14:	4970      	ldr	r1, [pc, #448]	; (8003bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa92 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	e0d3      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2C_Master_Transmit+0x50>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0cc      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d007      	beq.n	8003a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2210      	movs	r2, #16
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	893a      	ldrh	r2, [r7, #8]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a50      	ldr	r2, [pc, #320]	; (8003bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f9ca 	bl	8003e3c <I2C_MasterRequestWrite>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e08d      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ac8:	e066      	b.n	8003b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fb50 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d11b      	bne.n	8003b6c <HAL_I2C_Master_Transmit+0x188>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d017      	beq.n	8003b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	6a39      	ldr	r1, [r7, #32]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fb47 	bl	8004204 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d107      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e01a      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d194      	bne.n	8003aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	00100002 	.word	0x00100002
 8003bdc:	ffff0000 	.word	0xffff0000

08003be0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	460b      	mov	r3, r1
 8003bee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7fe fb74 	bl	80022dc <HAL_GetTick>
 8003bf4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f040 8111 	bne.w	8003e2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2319      	movs	r3, #25
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4988      	ldr	r1, [pc, #544]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f994 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e104      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2C_IsDeviceReady+0x50>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0fd      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d007      	beq.n	8003c56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a70      	ldr	r2, [pc, #448]	; (8003e38 <HAL_I2C_IsDeviceReady+0x258>)
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f952 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb0:	d103      	bne.n	8003cba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0b6      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe fb05 	bl	80022dc <HAL_GetTick>
 8003cd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d02:	e025      	b.n	8003d50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d04:	f7fe faea 	bl	80022dc <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <HAL_I2C_IsDeviceReady+0x13a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22a0      	movs	r2, #160	; 0xa0
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2ba0      	cmp	r3, #160	; 0xa0
 8003d5a:	d005      	beq.n	8003d68 <HAL_I2C_IsDeviceReady+0x188>
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_I2C_IsDeviceReady+0x188>
 8003d62:	7dbb      	ldrb	r3, [r7, #22]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0cd      	beq.n	8003d04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d129      	bne.n	8003dd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2319      	movs	r3, #25
 8003daa:	2201      	movs	r2, #1
 8003dac:	4921      	ldr	r1, [pc, #132]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8c6 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e036      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e02c      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2319      	movs	r3, #25
 8003df2:	2201      	movs	r2, #1
 8003df4:	490f      	ldr	r1, [pc, #60]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8a2 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e012      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f4ff af32 	bcc.w	8003c7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00100002 	.word	0x00100002
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d006      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2a>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d003      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2a>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e64:	d108      	bne.n	8003e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e00b      	b.n	8003e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d107      	bne.n	8003e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f84f 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d103      	bne.n	8003ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e035      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ecc:	d108      	bne.n	8003ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003edc:	611a      	str	r2, [r3, #16]
 8003ede:	e01b      	b.n	8003f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee0:	897b      	ldrh	r3, [r7, #10]
 8003ee2:	11db      	asrs	r3, r3, #7
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0306 	and.w	r3, r3, #6
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f063 030f 	orn	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <I2C_MasterRequestWrite+0xfc>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f898 	bl	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e010      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <I2C_MasterRequestWrite+0x100>)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f888 	bl	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	00010008 	.word	0x00010008
 8003f3c:	00010002 	.word	0x00010002

08003f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f50:	e048      	b.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d044      	beq.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe f9bf 	bl	80022dc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d139      	bne.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10d      	bne.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	43da      	mvns	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	e00c      	b.n	8003fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d116      	bne.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e023      	b.n	800402c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10d      	bne.n	800400a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	e00c      	b.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d093      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004042:	e071      	b.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d123      	bne.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e067      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d041      	beq.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7fe f91a 	bl	80022dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d136      	bne.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10c      	bne.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	e00b      	b.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	43da      	mvns	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e021      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10c      	bne.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	43da      	mvns	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e00b      	b.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f af6d 	bne.w	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	e034      	b.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f886 	bl	8004294 <I2C_IsAcknowledgeFailed>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e034      	b.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d028      	beq.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe f89f 	bl	80022dc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11d      	bne.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d016      	beq.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e007      	b.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b80      	cmp	r3, #128	; 0x80
 80041f8:	d1c3      	bne.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004210:	e034      	b.n	800427c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f83e 	bl	8004294 <I2C_IsAcknowledgeFailed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e034      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d028      	beq.n	800427c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe f857 	bl	80022dc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11d      	bne.n	800427c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d016      	beq.n	800427c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d1c3      	bne.n	8004212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d11b      	bne.n	80042e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e272      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8087 	beq.w	800441e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004310:	4b92      	ldr	r3, [pc, #584]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b04      	cmp	r3, #4
 800431a:	d00c      	beq.n	8004336 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800431c:	4b8f      	ldr	r3, [pc, #572]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d112      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
 8004328:	4b8c      	ldr	r3, [pc, #560]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d10b      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	4b89      	ldr	r3, [pc, #548]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d06c      	beq.n	800441c <HAL_RCC_OscConfig+0x12c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d168      	bne.n	800441c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e24c      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x76>
 8004358:	4b80      	ldr	r3, [pc, #512]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7f      	ldr	r2, [pc, #508]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x98>
 800436e:	4b7b      	ldr	r3, [pc, #492]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7a      	ldr	r2, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b78      	ldr	r3, [pc, #480]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a77      	ldr	r2, [pc, #476]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0xbc>
 8004392:	4b72      	ldr	r3, [pc, #456]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a71      	ldr	r2, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6f      	ldr	r3, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6e      	ldr	r2, [pc, #440]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 80043ac:	4b6b      	ldr	r3, [pc, #428]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6a      	ldr	r2, [pc, #424]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b68      	ldr	r3, [pc, #416]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a67      	ldr	r2, [pc, #412]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd ff86 	bl	80022dc <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd ff82 	bl	80022dc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e200      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b5d      	ldr	r3, [pc, #372]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe4>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd ff72 	bl	80022dc <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd ff6e 	bl	80022dc <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1ec      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x10c>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442a:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x18c>
 8004442:	4b46      	ldr	r3, [pc, #280]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b43      	ldr	r3, [pc, #268]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x176>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4939      	ldr	r1, [pc, #228]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCC_OscConfig+0x270>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fd ff27 	bl	80022dc <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd ff23 	bl	80022dc <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1a1      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2d      	ldr	r3, [pc, #180]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4927      	ldr	r1, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <HAL_RCC_OscConfig+0x270>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd ff06 	bl	80022dc <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fd ff02 	bl	80022dc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e180      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d03a      	beq.n	8004574 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d019      	beq.n	800453a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fd fee6 	bl	80022dc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fee2 	bl	80022dc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e160      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_RCC_OscConfig+0x26c>)
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004532:	2001      	movs	r0, #1
 8004534:	f000 face 	bl	8004ad4 <RCC_Delay>
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_OscConfig+0x274>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fd fecc 	bl	80022dc <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004546:	e00f      	b.n	8004568 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004548:	f7fd fec8 	bl	80022dc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d908      	bls.n	8004568 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e146      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	42420000 	.word	0x42420000
 8004564:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	4b92      	ldr	r3, [pc, #584]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e9      	bne.n	8004548 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a6 	beq.w	80046ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4a87      	ldr	r2, [pc, #540]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	61d3      	str	r3, [r2, #28]
 800459e:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	4b82      	ldr	r3, [pc, #520]	; (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d118      	bne.n	80045ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ba:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7e      	ldr	r2, [pc, #504]	; (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c6:	f7fd fe89 	bl	80022dc <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fd fe85 	bl	80022dc <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	; 0x64
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e103      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	4b75      	ldr	r3, [pc, #468]	; (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x312>
 80045f4:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6213      	str	r3, [r2, #32]
 8004600:	e02d      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x334>
 800460a:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a69      	ldr	r2, [pc, #420]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b67      	ldr	r3, [pc, #412]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a66      	ldr	r2, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	e01c      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d10c      	bne.n	8004646 <HAL_RCC_OscConfig+0x356>
 800462c:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4a60      	ldr	r2, [pc, #384]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6213      	str	r3, [r2, #32]
 8004638:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a5d      	ldr	r2, [pc, #372]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	e00b      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004646:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a5a      	ldr	r2, [pc, #360]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6213      	str	r3, [r2, #32]
 8004652:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a57      	ldr	r2, [pc, #348]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d015      	beq.n	8004692 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7fd fe39 	bl	80022dc <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd fe35 	bl	80022dc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0b1      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCC_OscConfig+0x37e>
 8004690:	e014      	b.n	80046bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fd fe23 	bl	80022dc <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fd fe1f 	bl	80022dc <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e09b      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ee      	bne.n	800469a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4a3b      	ldr	r2, [pc, #236]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8087 	beq.w	80047e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d061      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d146      	bne.n	800477a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b33      	ldr	r3, [pc, #204]	; (80047bc <HAL_RCC_OscConfig+0x4cc>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fd fdf3 	bl	80022dc <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fd fdef 	bl	80022dc <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e06d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d108      	bne.n	8004734 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4921      	ldr	r1, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004734:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a19      	ldr	r1, [r3, #32]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	430b      	orrs	r3, r1
 8004746:	491b      	ldr	r1, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x4cc>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fd fdc3 	bl	80022dc <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd fdbf 	bl	80022dc <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x46a>
 8004778:	e035      	b.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <HAL_RCC_OscConfig+0x4cc>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fd fdac 	bl	80022dc <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fd fda8 	bl	80022dc <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e026      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x498>
 80047a6:	e01e      	b.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e019      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
 80047bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_OscConfig+0x500>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0d0      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d910      	bls.n	8004838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0207 	bic.w	r2, r3, #7
 800481e:	4965      	ldr	r1, [pc, #404]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800485a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d040      	beq.n	8004914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d115      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e073      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06b      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4936      	ldr	r1, [pc, #216]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e4:	f7fd fcfa 	bl	80022dc <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fd fcf6 	bl	80022dc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e053      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 0207 	bic.w	r2, r3, #7
 800492a:	4922      	ldr	r1, [pc, #136]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f821 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004986:	4602      	mov	r2, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	490a      	ldr	r1, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	5ccb      	ldrb	r3, [r1, r3]
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1cc>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_ClockConfig+0x1d0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fc58 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40022000 	.word	0x40022000
 80049b8:	40021000 	.word	0x40021000
 80049bc:	08007a04 	.word	0x08007a04
 80049c0:	20000030 	.word	0x20000030
 80049c4:	20000034 	.word	0x20000034

080049c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x94>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x30>
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x36>
 80049f6:	e027      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049f8:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 80049fa:	613b      	str	r3, [r7, #16]
      break;
 80049fc:	e027      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0c9b      	lsrs	r3, r3, #18
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a08:	5cd3      	ldrb	r3, [r2, r3]
 8004a0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d010      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0c5b      	lsrs	r3, r3, #17
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e004      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	613b      	str	r3, [r7, #16]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a4a:	613b      	str	r3, [r7, #16]
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	693b      	ldr	r3, [r7, #16]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	007a1200 	.word	0x007a1200
 8004a64:	08007a1c 	.word	0x08007a1c
 8004a68:	08007a2c 	.word	0x08007a2c
 8004a6c:	003d0900 	.word	0x003d0900

08004a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	20000030 	.word	0x20000030

08004a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a88:	f7ff fff2 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08007a14 	.word	0x08007a14

08004aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab0:	f7ff ffde 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	0adb      	lsrs	r3, r3, #11
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	08007a14 	.word	0x08007a14

08004ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <RCC_Delay+0x34>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <RCC_Delay+0x38>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0a5b      	lsrs	r3, r3, #9
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004af0:	bf00      	nop
  }
  while (Delay --);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	60fa      	str	r2, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f9      	bne.n	8004af0 <RCC_Delay+0x1c>
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	20000030 	.word	0x20000030
 8004b0c:	10624dd3 	.word	0x10624dd3

08004b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d07d      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b30:	4b4f      	ldr	r3, [pc, #316]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	61d3      	str	r3, [r2, #28]
 8004b48:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d118      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a42      	ldr	r2, [pc, #264]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b70:	f7fd fbb4 	bl	80022dc <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fd fbb0 	bl	80022dc <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e06d      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02e      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d027      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bca:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fd fb7f 	bl	80022dc <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fd fb7b 	bl	80022dc <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e036      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ee      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4917      	ldr	r1, [pc, #92]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	490b      	ldr	r1, [pc, #44]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4904      	ldr	r1, [pc, #16]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40007000 	.word	0x40007000
 8004c78:	42420440 	.word	0x42420440

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e042      	b.n	8004d14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f9c6 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fcd5 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d112      	bne.n	8004d5c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Receive_IT+0x26>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e00b      	b.n	8004d5e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fab7 	bl	80052c6 <UART_Start_Receive_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	e000      	b.n	8004d5e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0ba      	sub	sp, #232	; 0xe8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
 8004dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb93 	bl	80054f2 <UART_Receive_IT>
      return;
 8004dcc:	e25b      	b.n	8005286 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80de 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80d1 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
 8004e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f043 0208 	orr.w	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 81f2 	beq.w	800527c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fb1e 	bl	80054f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x17a>
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04f      	beq.n	8004f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa28 	bl	8005338 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d041      	beq.n	8004f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1d9      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d013      	beq.n	8004f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	4a7e      	ldr	r2, [pc, #504]	; (8005148 <HAL_UART_IRQHandler+0x3e0>)
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe f8d0 	bl	80030fc <HAL_DMA_Abort_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00e      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f993 	bl	800529e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00a      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f98f 	bl	800529e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e006      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f98b 	bl	800529e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f8e:	e175      	b.n	800527c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	bf00      	nop
    return;
 8004f92:	e173      	b.n	800527c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 814f 	bne.w	800523c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8148 	beq.w	800523c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8141 	beq.w	800523c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80b6 	beq.w	800514c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8145 	beq.w	8005280 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f080 813e 	bcs.w	8005280 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b20      	cmp	r3, #32
 8005014:	f000 8088 	beq.w	8005128 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800502e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005036:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005044:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005050:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800505c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1d9      	bne.n	8005018 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005088:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800508c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005090:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800509a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e1      	bne.n	8005064 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	f023 0310 	bic.w	r3, r3, #16
 80050fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800510a:	65ba      	str	r2, [r7, #88]	; 0x58
 800510c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd ffae 	bl	8003084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005136:	b29b      	uxth	r3, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	b29b      	uxth	r3, r3
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8b6 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005144:	e09c      	b.n	8005280 <HAL_UART_IRQHandler+0x518>
 8005146:	bf00      	nop
 8005148:	080053fd 	.word	0x080053fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005154:	b29b      	uxth	r3, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 808e 	beq.w	8005284 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8089 	beq.w	8005284 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005196:	647a      	str	r2, [r7, #68]	; 0x44
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800519c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e3      	bne.n	8005172 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	623b      	str	r3, [r7, #32]
   return(result);
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3314      	adds	r3, #20
 80051ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ce:	633a      	str	r2, [r7, #48]	; 0x30
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e3      	bne.n	80051aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0310 	bic.w	r3, r3, #16
 8005206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	617b      	str	r3, [r7, #20]
   return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e3      	bne.n	80051f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f83b 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800523a:	e023      	b.n	8005284 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_UART_IRQHandler+0x4f4>
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f8e5 	bl	8005424 <UART_Transmit_IT>
    return;
 800525a:	e014      	b.n	8005286 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00e      	beq.n	8005286 <HAL_UART_IRQHandler+0x51e>
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f924 	bl	80054c2 <UART_EndTransmit_IT>
    return;
 800527a:	e004      	b.n	8005286 <HAL_UART_IRQHandler+0x51e>
    return;
 800527c:	bf00      	nop
 800527e:	e002      	b.n	8005286 <HAL_UART_IRQHandler+0x51e>
      return;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_UART_IRQHandler+0x51e>
      return;
 8005284:	bf00      	nop
  }
}
 8005286:	37e8      	adds	r7, #232	; 0xe8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2222      	movs	r2, #34	; 0x22
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0220 	orr.w	r2, r2, #32
 800532a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b095      	sub	sp, #84	; 0x54
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005360:	643a      	str	r2, [r7, #64]	; 0x40
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	61fb      	str	r3, [r7, #28]
   return(result);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d119      	bne.n	80053e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	647b      	str	r3, [r7, #68]	; 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d0:	61ba      	str	r2, [r7, #24]
 80053d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6979      	ldr	r1, [r7, #20]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	613b      	str	r3, [r7, #16]
   return(result);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e5      	bne.n	80053b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053f2:	bf00      	nop
 80053f4:	3754      	adds	r7, #84	; 0x54
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff ff41 	bl	800529e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b21      	cmp	r3, #33	; 0x21
 8005436:	d13e      	bne.n	80054b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d114      	bne.n	800546c <UART_Transmit_IT+0x48>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d110      	bne.n	800546c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800545e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]
 800546a:	e008      	b.n	800547e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6211      	str	r1, [r2, #32]
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4619      	mov	r1, r3
 800548c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fed2 	bl	800528c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	; 0x30
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	f040 80ae 	bne.w	8005664 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d117      	bne.n	8005542 <UART_Receive_IT+0x50>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	b29a      	uxth	r2, r3
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
 8005540:	e026      	b.n	8005590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d007      	beq.n	8005566 <UART_Receive_IT+0x74>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <UART_Receive_IT+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e008      	b.n	8005586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29b      	uxth	r3, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4619      	mov	r1, r3
 800559e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d15d      	bne.n	8005660 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0220 	bic.w	r2, r2, #32
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d135      	bne.n	8005656 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	623a      	str	r2, [r7, #32]
 8005612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	61bb      	str	r3, [r7, #24]
   return(result);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b10      	cmp	r3, #16
 8005630:	d10a      	bne.n	8005648 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fe2e 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
 8005654:	e002      	b.n	800565c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb fd02 	bl	8001060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e002      	b.n	8005666 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056aa:	f023 030c 	bic.w	r3, r3, #12
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <UART_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7ff f9e8 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	e002      	b.n	80056e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7ff f9d0 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80056e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009a      	lsls	r2, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	4a22      	ldr	r2, [pc, #136]	; (8005788 <UART_SetConfig+0x118>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	0119      	lsls	r1, r3, #4
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009a      	lsls	r2, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fbb2 f2f3 	udiv	r2, r2, r3
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <UART_SetConfig+0x118>)
 800571e:	fba3 0302 	umull	r0, r3, r3, r2
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2064      	movs	r0, #100	; 0x64
 8005726:	fb00 f303 	mul.w	r3, r0, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	3332      	adds	r3, #50	; 0x32
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <UART_SetConfig+0x118>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573c:	4419      	add	r1, r3
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009a      	lsls	r2, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fbb2 f2f3 	udiv	r2, r2, r3
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <UART_SetConfig+0x118>)
 8005756:	fba3 0302 	umull	r0, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2064      	movs	r0, #100	; 0x64
 800575e:	fb00 f303 	mul.w	r3, r0, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	; 0x32
 8005768:	4a07      	ldr	r2, [pc, #28]	; (8005788 <UART_SetConfig+0x118>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	440a      	add	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40013800 	.word	0x40013800
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <siprintf>:
 800578c:	b40e      	push	{r1, r2, r3}
 800578e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005792:	b500      	push	{lr}
 8005794:	b09c      	sub	sp, #112	; 0x70
 8005796:	ab1d      	add	r3, sp, #116	; 0x74
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9006      	str	r0, [sp, #24]
 800579c:	9107      	str	r1, [sp, #28]
 800579e:	9104      	str	r1, [sp, #16]
 80057a0:	4808      	ldr	r0, [pc, #32]	; (80057c4 <siprintf+0x38>)
 80057a2:	4909      	ldr	r1, [pc, #36]	; (80057c8 <siprintf+0x3c>)
 80057a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a8:	9105      	str	r1, [sp, #20]
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	a902      	add	r1, sp, #8
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	f000 f98e 	bl	8005ad0 <_svfiprintf_r>
 80057b4:	2200      	movs	r2, #0
 80057b6:	9b02      	ldr	r3, [sp, #8]
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	b01c      	add	sp, #112	; 0x70
 80057bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c0:	b003      	add	sp, #12
 80057c2:	4770      	bx	lr
 80057c4:	20000088 	.word	0x20000088
 80057c8:	ffff0208 	.word	0xffff0208

080057cc <memset>:
 80057cc:	4603      	mov	r3, r0
 80057ce:	4402      	add	r2, r0
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d100      	bne.n	80057d6 <memset+0xa>
 80057d4:	4770      	bx	lr
 80057d6:	f803 1b01 	strb.w	r1, [r3], #1
 80057da:	e7f9      	b.n	80057d0 <memset+0x4>

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000088 	.word	0x20000088

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	2600      	movs	r6, #0
 80057ec:	4d0c      	ldr	r5, [pc, #48]	; (8005820 <__libc_init_array+0x38>)
 80057ee:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057f0:	1b64      	subs	r4, r4, r5
 80057f2:	10a4      	asrs	r4, r4, #2
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	f000 fe64 	bl	80064c4 <_init>
 80057fc:	2600      	movs	r6, #0
 80057fe:	4d0a      	ldr	r5, [pc, #40]	; (8005828 <__libc_init_array+0x40>)
 8005800:	4c0a      	ldr	r4, [pc, #40]	; (800582c <__libc_init_array+0x44>)
 8005802:	1b64      	subs	r4, r4, r5
 8005804:	10a4      	asrs	r4, r4, #2
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08007a64 	.word	0x08007a64
 8005824:	08007a64 	.word	0x08007a64
 8005828:	08007a64 	.word	0x08007a64
 800582c:	08007a68 	.word	0x08007a68

08005830 <__retarget_lock_acquire_recursive>:
 8005830:	4770      	bx	lr

08005832 <__retarget_lock_release_recursive>:
 8005832:	4770      	bx	lr

08005834 <_free_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4605      	mov	r5, r0
 8005838:	2900      	cmp	r1, #0
 800583a:	d040      	beq.n	80058be <_free_r+0x8a>
 800583c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005840:	1f0c      	subs	r4, r1, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfb8      	it	lt
 8005846:	18e4      	addlt	r4, r4, r3
 8005848:	f000 f8dc 	bl	8005a04 <__malloc_lock>
 800584c:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <_free_r+0x8c>)
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	b933      	cbnz	r3, 8005860 <_free_r+0x2c>
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	6014      	str	r4, [r2, #0]
 8005856:	4628      	mov	r0, r5
 8005858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800585c:	f000 b8d8 	b.w	8005a10 <__malloc_unlock>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d908      	bls.n	8005876 <_free_r+0x42>
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	1821      	adds	r1, r4, r0
 8005868:	428b      	cmp	r3, r1
 800586a:	bf01      	itttt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	e7ed      	b.n	8005852 <_free_r+0x1e>
 8005876:	461a      	mov	r2, r3
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	b10b      	cbz	r3, 8005880 <_free_r+0x4c>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d9fa      	bls.n	8005876 <_free_r+0x42>
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	1850      	adds	r0, r2, r1
 8005884:	42a0      	cmp	r0, r4
 8005886:	d10b      	bne.n	80058a0 <_free_r+0x6c>
 8005888:	6820      	ldr	r0, [r4, #0]
 800588a:	4401      	add	r1, r0
 800588c:	1850      	adds	r0, r2, r1
 800588e:	4283      	cmp	r3, r0
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	d1e0      	bne.n	8005856 <_free_r+0x22>
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4408      	add	r0, r1
 800589a:	6010      	str	r0, [r2, #0]
 800589c:	6053      	str	r3, [r2, #4]
 800589e:	e7da      	b.n	8005856 <_free_r+0x22>
 80058a0:	d902      	bls.n	80058a8 <_free_r+0x74>
 80058a2:	230c      	movs	r3, #12
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	e7d6      	b.n	8005856 <_free_r+0x22>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	1821      	adds	r1, r4, r0
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf01      	itttt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	1809      	addeq	r1, r1, r0
 80058b6:	6021      	streq	r1, [r4, #0]
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	6054      	str	r4, [r2, #4]
 80058bc:	e7cb      	b.n	8005856 <_free_r+0x22>
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	2000079c 	.word	0x2000079c

080058c4 <sbrk_aligned>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	4e0e      	ldr	r6, [pc, #56]	; (8005900 <sbrk_aligned+0x3c>)
 80058c8:	460c      	mov	r4, r1
 80058ca:	6831      	ldr	r1, [r6, #0]
 80058cc:	4605      	mov	r5, r0
 80058ce:	b911      	cbnz	r1, 80058d6 <sbrk_aligned+0x12>
 80058d0:	f000 fbaa 	bl	8006028 <_sbrk_r>
 80058d4:	6030      	str	r0, [r6, #0]
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 fba5 	bl	8006028 <_sbrk_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	d00a      	beq.n	80058f8 <sbrk_aligned+0x34>
 80058e2:	1cc4      	adds	r4, r0, #3
 80058e4:	f024 0403 	bic.w	r4, r4, #3
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d007      	beq.n	80058fc <sbrk_aligned+0x38>
 80058ec:	1a21      	subs	r1, r4, r0
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 fb9a 	bl	8006028 <_sbrk_r>
 80058f4:	3001      	adds	r0, #1
 80058f6:	d101      	bne.n	80058fc <sbrk_aligned+0x38>
 80058f8:	f04f 34ff 	mov.w	r4, #4294967295
 80058fc:	4620      	mov	r0, r4
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	200007a0 	.word	0x200007a0

08005904 <_malloc_r>:
 8005904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005908:	1ccd      	adds	r5, r1, #3
 800590a:	f025 0503 	bic.w	r5, r5, #3
 800590e:	3508      	adds	r5, #8
 8005910:	2d0c      	cmp	r5, #12
 8005912:	bf38      	it	cc
 8005914:	250c      	movcc	r5, #12
 8005916:	2d00      	cmp	r5, #0
 8005918:	4607      	mov	r7, r0
 800591a:	db01      	blt.n	8005920 <_malloc_r+0x1c>
 800591c:	42a9      	cmp	r1, r5
 800591e:	d905      	bls.n	800592c <_malloc_r+0x28>
 8005920:	230c      	movs	r3, #12
 8005922:	2600      	movs	r6, #0
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4630      	mov	r0, r6
 8005928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a00 <_malloc_r+0xfc>
 8005930:	f000 f868 	bl	8005a04 <__malloc_lock>
 8005934:	f8d8 3000 	ldr.w	r3, [r8]
 8005938:	461c      	mov	r4, r3
 800593a:	bb5c      	cbnz	r4, 8005994 <_malloc_r+0x90>
 800593c:	4629      	mov	r1, r5
 800593e:	4638      	mov	r0, r7
 8005940:	f7ff ffc0 	bl	80058c4 <sbrk_aligned>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	4604      	mov	r4, r0
 8005948:	d155      	bne.n	80059f6 <_malloc_r+0xf2>
 800594a:	f8d8 4000 	ldr.w	r4, [r8]
 800594e:	4626      	mov	r6, r4
 8005950:	2e00      	cmp	r6, #0
 8005952:	d145      	bne.n	80059e0 <_malloc_r+0xdc>
 8005954:	2c00      	cmp	r4, #0
 8005956:	d048      	beq.n	80059ea <_malloc_r+0xe6>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	4631      	mov	r1, r6
 800595c:	4638      	mov	r0, r7
 800595e:	eb04 0903 	add.w	r9, r4, r3
 8005962:	f000 fb61 	bl	8006028 <_sbrk_r>
 8005966:	4581      	cmp	r9, r0
 8005968:	d13f      	bne.n	80059ea <_malloc_r+0xe6>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	4638      	mov	r0, r7
 800596e:	1a6d      	subs	r5, r5, r1
 8005970:	4629      	mov	r1, r5
 8005972:	f7ff ffa7 	bl	80058c4 <sbrk_aligned>
 8005976:	3001      	adds	r0, #1
 8005978:	d037      	beq.n	80059ea <_malloc_r+0xe6>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	442b      	add	r3, r5
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	f8d8 3000 	ldr.w	r3, [r8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d038      	beq.n	80059fa <_malloc_r+0xf6>
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	42a2      	cmp	r2, r4
 800598c:	d12b      	bne.n	80059e6 <_malloc_r+0xe2>
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	e00f      	b.n	80059b4 <_malloc_r+0xb0>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	1b52      	subs	r2, r2, r5
 8005998:	d41f      	bmi.n	80059da <_malloc_r+0xd6>
 800599a:	2a0b      	cmp	r2, #11
 800599c:	d917      	bls.n	80059ce <_malloc_r+0xca>
 800599e:	1961      	adds	r1, r4, r5
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	6025      	str	r5, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	6059      	strne	r1, [r3, #4]
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	bf08      	it	eq
 80059ac:	f8c8 1000 	streq.w	r1, [r8]
 80059b0:	5162      	str	r2, [r4, r5]
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	4638      	mov	r0, r7
 80059b6:	f104 060b 	add.w	r6, r4, #11
 80059ba:	f000 f829 	bl	8005a10 <__malloc_unlock>
 80059be:	f026 0607 	bic.w	r6, r6, #7
 80059c2:	1d23      	adds	r3, r4, #4
 80059c4:	1af2      	subs	r2, r6, r3
 80059c6:	d0ae      	beq.n	8005926 <_malloc_r+0x22>
 80059c8:	1b9b      	subs	r3, r3, r6
 80059ca:	50a3      	str	r3, [r4, r2]
 80059cc:	e7ab      	b.n	8005926 <_malloc_r+0x22>
 80059ce:	42a3      	cmp	r3, r4
 80059d0:	6862      	ldr	r2, [r4, #4]
 80059d2:	d1dd      	bne.n	8005990 <_malloc_r+0x8c>
 80059d4:	f8c8 2000 	str.w	r2, [r8]
 80059d8:	e7ec      	b.n	80059b4 <_malloc_r+0xb0>
 80059da:	4623      	mov	r3, r4
 80059dc:	6864      	ldr	r4, [r4, #4]
 80059de:	e7ac      	b.n	800593a <_malloc_r+0x36>
 80059e0:	4634      	mov	r4, r6
 80059e2:	6876      	ldr	r6, [r6, #4]
 80059e4:	e7b4      	b.n	8005950 <_malloc_r+0x4c>
 80059e6:	4613      	mov	r3, r2
 80059e8:	e7cc      	b.n	8005984 <_malloc_r+0x80>
 80059ea:	230c      	movs	r3, #12
 80059ec:	4638      	mov	r0, r7
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	f000 f80e 	bl	8005a10 <__malloc_unlock>
 80059f4:	e797      	b.n	8005926 <_malloc_r+0x22>
 80059f6:	6025      	str	r5, [r4, #0]
 80059f8:	e7dc      	b.n	80059b4 <_malloc_r+0xb0>
 80059fa:	605b      	str	r3, [r3, #4]
 80059fc:	deff      	udf	#255	; 0xff
 80059fe:	bf00      	nop
 8005a00:	2000079c 	.word	0x2000079c

08005a04 <__malloc_lock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_lock+0x8>)
 8005a06:	f7ff bf13 	b.w	8005830 <__retarget_lock_acquire_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000798 	.word	0x20000798

08005a10 <__malloc_unlock>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__malloc_unlock+0x8>)
 8005a12:	f7ff bf0e 	b.w	8005832 <__retarget_lock_release_recursive>
 8005a16:	bf00      	nop
 8005a18:	20000798 	.word	0x20000798

08005a1c <__ssputs_r>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	461f      	mov	r7, r3
 8005a22:	688e      	ldr	r6, [r1, #8]
 8005a24:	4682      	mov	sl, r0
 8005a26:	42be      	cmp	r6, r7
 8005a28:	460c      	mov	r4, r1
 8005a2a:	4690      	mov	r8, r2
 8005a2c:	680b      	ldr	r3, [r1, #0]
 8005a2e:	d82c      	bhi.n	8005a8a <__ssputs_r+0x6e>
 8005a30:	898a      	ldrh	r2, [r1, #12]
 8005a32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a36:	d026      	beq.n	8005a86 <__ssputs_r+0x6a>
 8005a38:	6965      	ldr	r5, [r4, #20]
 8005a3a:	6909      	ldr	r1, [r1, #16]
 8005a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a40:	eba3 0901 	sub.w	r9, r3, r1
 8005a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a48:	1c7b      	adds	r3, r7, #1
 8005a4a:	444b      	add	r3, r9
 8005a4c:	106d      	asrs	r5, r5, #1
 8005a4e:	429d      	cmp	r5, r3
 8005a50:	bf38      	it	cc
 8005a52:	461d      	movcc	r5, r3
 8005a54:	0553      	lsls	r3, r2, #21
 8005a56:	d527      	bpl.n	8005aa8 <__ssputs_r+0x8c>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7ff ff53 	bl	8005904 <_malloc_r>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	b360      	cbz	r0, 8005abc <__ssputs_r+0xa0>
 8005a62:	464a      	mov	r2, r9
 8005a64:	6921      	ldr	r1, [r4, #16]
 8005a66:	f000 fafd 	bl	8006064 <memcpy>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	6126      	str	r6, [r4, #16]
 8005a78:	444e      	add	r6, r9
 8005a7a:	6026      	str	r6, [r4, #0]
 8005a7c:	463e      	mov	r6, r7
 8005a7e:	6165      	str	r5, [r4, #20]
 8005a80:	eba5 0509 	sub.w	r5, r5, r9
 8005a84:	60a5      	str	r5, [r4, #8]
 8005a86:	42be      	cmp	r6, r7
 8005a88:	d900      	bls.n	8005a8c <__ssputs_r+0x70>
 8005a8a:	463e      	mov	r6, r7
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	4641      	mov	r1, r8
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	f000 faaf 	bl	8005ff4 <memmove>
 8005a96:	2000      	movs	r0, #0
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	1b9b      	subs	r3, r3, r6
 8005a9c:	60a3      	str	r3, [r4, #8]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	4433      	add	r3, r6
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	f000 fae9 	bl	8006080 <_realloc_r>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1e0      	bne.n	8005a76 <__ssputs_r+0x5a>
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	6921      	ldr	r1, [r4, #16]
 8005ab8:	f7ff febc 	bl	8005834 <_free_r>
 8005abc:	230c      	movs	r3, #12
 8005abe:	f8ca 3000 	str.w	r3, [sl]
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	e7e9      	b.n	8005aa4 <__ssputs_r+0x88>

08005ad0 <_svfiprintf_r>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	4698      	mov	r8, r3
 8005ad6:	898b      	ldrh	r3, [r1, #12]
 8005ad8:	4607      	mov	r7, r0
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	460d      	mov	r5, r1
 8005ade:	4614      	mov	r4, r2
 8005ae0:	b09d      	sub	sp, #116	; 0x74
 8005ae2:	d50e      	bpl.n	8005b02 <_svfiprintf_r+0x32>
 8005ae4:	690b      	ldr	r3, [r1, #16]
 8005ae6:	b963      	cbnz	r3, 8005b02 <_svfiprintf_r+0x32>
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	f7ff ff0b 	bl	8005904 <_malloc_r>
 8005aee:	6028      	str	r0, [r5, #0]
 8005af0:	6128      	str	r0, [r5, #16]
 8005af2:	b920      	cbnz	r0, 8005afe <_svfiprintf_r+0x2e>
 8005af4:	230c      	movs	r3, #12
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	e0d0      	b.n	8005ca0 <_svfiprintf_r+0x1d0>
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	616b      	str	r3, [r5, #20]
 8005b02:	2300      	movs	r3, #0
 8005b04:	9309      	str	r3, [sp, #36]	; 0x24
 8005b06:	2320      	movs	r3, #32
 8005b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b0c:	2330      	movs	r3, #48	; 0x30
 8005b0e:	f04f 0901 	mov.w	r9, #1
 8005b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005cb8 <_svfiprintf_r+0x1e8>
 8005b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b1e:	4623      	mov	r3, r4
 8005b20:	469a      	mov	sl, r3
 8005b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b26:	b10a      	cbz	r2, 8005b2c <_svfiprintf_r+0x5c>
 8005b28:	2a25      	cmp	r2, #37	; 0x25
 8005b2a:	d1f9      	bne.n	8005b20 <_svfiprintf_r+0x50>
 8005b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b30:	d00b      	beq.n	8005b4a <_svfiprintf_r+0x7a>
 8005b32:	465b      	mov	r3, fp
 8005b34:	4622      	mov	r2, r4
 8005b36:	4629      	mov	r1, r5
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f7ff ff6f 	bl	8005a1c <__ssputs_r>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f000 80a9 	beq.w	8005c96 <_svfiprintf_r+0x1c6>
 8005b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b46:	445a      	add	r2, fp
 8005b48:	9209      	str	r2, [sp, #36]	; 0x24
 8005b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80a1 	beq.w	8005c96 <_svfiprintf_r+0x1c6>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5e:	f10a 0a01 	add.w	sl, sl, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	9307      	str	r3, [sp, #28]
 8005b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b6c:	4654      	mov	r4, sl
 8005b6e:	2205      	movs	r2, #5
 8005b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b74:	4850      	ldr	r0, [pc, #320]	; (8005cb8 <_svfiprintf_r+0x1e8>)
 8005b76:	f000 fa67 	bl	8006048 <memchr>
 8005b7a:	9a04      	ldr	r2, [sp, #16]
 8005b7c:	b9d8      	cbnz	r0, 8005bb6 <_svfiprintf_r+0xe6>
 8005b7e:	06d0      	lsls	r0, r2, #27
 8005b80:	bf44      	itt	mi
 8005b82:	2320      	movmi	r3, #32
 8005b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b88:	0711      	lsls	r1, r2, #28
 8005b8a:	bf44      	itt	mi
 8005b8c:	232b      	movmi	r3, #43	; 0x2b
 8005b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b92:	f89a 3000 	ldrb.w	r3, [sl]
 8005b96:	2b2a      	cmp	r3, #42	; 0x2a
 8005b98:	d015      	beq.n	8005bc6 <_svfiprintf_r+0xf6>
 8005b9a:	4654      	mov	r4, sl
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f04f 0c0a 	mov.w	ip, #10
 8005ba2:	9a07      	ldr	r2, [sp, #28]
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005baa:	3b30      	subs	r3, #48	; 0x30
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d94d      	bls.n	8005c4c <_svfiprintf_r+0x17c>
 8005bb0:	b1b0      	cbz	r0, 8005be0 <_svfiprintf_r+0x110>
 8005bb2:	9207      	str	r2, [sp, #28]
 8005bb4:	e014      	b.n	8005be0 <_svfiprintf_r+0x110>
 8005bb6:	eba0 0308 	sub.w	r3, r0, r8
 8005bba:	fa09 f303 	lsl.w	r3, r9, r3
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	46a2      	mov	sl, r4
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	e7d2      	b.n	8005b6c <_svfiprintf_r+0x9c>
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	1d19      	adds	r1, r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	9103      	str	r1, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfbb      	ittet	lt
 8005bd2:	425b      	neglt	r3, r3
 8005bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd8:	9307      	strge	r3, [sp, #28]
 8005bda:	9307      	strlt	r3, [sp, #28]
 8005bdc:	bfb8      	it	lt
 8005bde:	9204      	strlt	r2, [sp, #16]
 8005be0:	7823      	ldrb	r3, [r4, #0]
 8005be2:	2b2e      	cmp	r3, #46	; 0x2e
 8005be4:	d10c      	bne.n	8005c00 <_svfiprintf_r+0x130>
 8005be6:	7863      	ldrb	r3, [r4, #1]
 8005be8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bea:	d134      	bne.n	8005c56 <_svfiprintf_r+0x186>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	3402      	adds	r4, #2
 8005bf0:	1d1a      	adds	r2, r3, #4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	9203      	str	r2, [sp, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bfb8      	it	lt
 8005bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bfe:	9305      	str	r3, [sp, #20]
 8005c00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005cbc <_svfiprintf_r+0x1ec>
 8005c04:	2203      	movs	r2, #3
 8005c06:	4650      	mov	r0, sl
 8005c08:	7821      	ldrb	r1, [r4, #0]
 8005c0a:	f000 fa1d 	bl	8006048 <memchr>
 8005c0e:	b138      	cbz	r0, 8005c20 <_svfiprintf_r+0x150>
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	9b04      	ldr	r3, [sp, #16]
 8005c14:	eba0 000a 	sub.w	r0, r0, sl
 8005c18:	4082      	lsls	r2, r0
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	3401      	adds	r4, #1
 8005c1e:	9304      	str	r3, [sp, #16]
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	2206      	movs	r2, #6
 8005c26:	4826      	ldr	r0, [pc, #152]	; (8005cc0 <_svfiprintf_r+0x1f0>)
 8005c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c2c:	f000 fa0c 	bl	8006048 <memchr>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d038      	beq.n	8005ca6 <_svfiprintf_r+0x1d6>
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <_svfiprintf_r+0x1f4>)
 8005c36:	bb1b      	cbnz	r3, 8005c80 <_svfiprintf_r+0x1b0>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	3307      	adds	r3, #7
 8005c3c:	f023 0307 	bic.w	r3, r3, #7
 8005c40:	3308      	adds	r3, #8
 8005c42:	9303      	str	r3, [sp, #12]
 8005c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c46:	4433      	add	r3, r6
 8005c48:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4a:	e768      	b.n	8005b1e <_svfiprintf_r+0x4e>
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	2001      	movs	r0, #1
 8005c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c54:	e7a6      	b.n	8005ba4 <_svfiprintf_r+0xd4>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f04f 0c0a 	mov.w	ip, #10
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	3401      	adds	r4, #1
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c68:	3a30      	subs	r2, #48	; 0x30
 8005c6a:	2a09      	cmp	r2, #9
 8005c6c:	d903      	bls.n	8005c76 <_svfiprintf_r+0x1a6>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0c6      	beq.n	8005c00 <_svfiprintf_r+0x130>
 8005c72:	9105      	str	r1, [sp, #20]
 8005c74:	e7c4      	b.n	8005c00 <_svfiprintf_r+0x130>
 8005c76:	4604      	mov	r4, r0
 8005c78:	2301      	movs	r3, #1
 8005c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c7e:	e7f0      	b.n	8005c62 <_svfiprintf_r+0x192>
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	462a      	mov	r2, r5
 8005c86:	4638      	mov	r0, r7
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <_svfiprintf_r+0x1f8>)
 8005c8a:	a904      	add	r1, sp, #16
 8005c8c:	f3af 8000 	nop.w
 8005c90:	1c42      	adds	r2, r0, #1
 8005c92:	4606      	mov	r6, r0
 8005c94:	d1d6      	bne.n	8005c44 <_svfiprintf_r+0x174>
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	065b      	lsls	r3, r3, #25
 8005c9a:	f53f af2d 	bmi.w	8005af8 <_svfiprintf_r+0x28>
 8005c9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ca0:	b01d      	add	sp, #116	; 0x74
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	ab03      	add	r3, sp, #12
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	462a      	mov	r2, r5
 8005cac:	4638      	mov	r0, r7
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <_svfiprintf_r+0x1f8>)
 8005cb0:	a904      	add	r1, sp, #16
 8005cb2:	f000 f87d 	bl	8005db0 <_printf_i>
 8005cb6:	e7eb      	b.n	8005c90 <_svfiprintf_r+0x1c0>
 8005cb8:	08007a2e 	.word	0x08007a2e
 8005cbc:	08007a34 	.word	0x08007a34
 8005cc0:	08007a38 	.word	0x08007a38
 8005cc4:	00000000 	.word	0x00000000
 8005cc8:	08005a1d 	.word	0x08005a1d

08005ccc <_printf_common>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	4699      	mov	r9, r3
 8005cd4:	688a      	ldr	r2, [r1, #8]
 8005cd6:	690b      	ldr	r3, [r1, #16]
 8005cd8:	4607      	mov	r7, r0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bfb8      	it	lt
 8005cde:	4613      	movlt	r3, r2
 8005ce0:	6033      	str	r3, [r6, #0]
 8005ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cec:	b10a      	cbz	r2, 8005cf2 <_printf_common+0x26>
 8005cee:	3301      	adds	r3, #1
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	0699      	lsls	r1, r3, #26
 8005cf6:	bf42      	ittt	mi
 8005cf8:	6833      	ldrmi	r3, [r6, #0]
 8005cfa:	3302      	addmi	r3, #2
 8005cfc:	6033      	strmi	r3, [r6, #0]
 8005cfe:	6825      	ldr	r5, [r4, #0]
 8005d00:	f015 0506 	ands.w	r5, r5, #6
 8005d04:	d106      	bne.n	8005d14 <_printf_common+0x48>
 8005d06:	f104 0a19 	add.w	sl, r4, #25
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	6832      	ldr	r2, [r6, #0]
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dc2b      	bgt.n	8005d6c <_printf_common+0xa0>
 8005d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d18:	1e13      	subs	r3, r2, #0
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	0692      	lsls	r2, r2, #26
 8005d22:	d430      	bmi.n	8005d86 <_printf_common+0xba>
 8005d24:	4649      	mov	r1, r9
 8005d26:	4638      	mov	r0, r7
 8005d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d2c:	47c0      	blx	r8
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d023      	beq.n	8005d7a <_printf_common+0xae>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	6922      	ldr	r2, [r4, #16]
 8005d36:	f003 0306 	and.w	r3, r3, #6
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	bf14      	ite	ne
 8005d3e:	2500      	movne	r5, #0
 8005d40:	6833      	ldreq	r3, [r6, #0]
 8005d42:	f04f 0600 	mov.w	r6, #0
 8005d46:	bf08      	it	eq
 8005d48:	68e5      	ldreq	r5, [r4, #12]
 8005d4a:	f104 041a 	add.w	r4, r4, #26
 8005d4e:	bf08      	it	eq
 8005d50:	1aed      	subeq	r5, r5, r3
 8005d52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d56:	bf08      	it	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfc4      	itt	gt
 8005d60:	1a9b      	subgt	r3, r3, r2
 8005d62:	18ed      	addgt	r5, r5, r3
 8005d64:	42b5      	cmp	r5, r6
 8005d66:	d11a      	bne.n	8005d9e <_printf_common+0xd2>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e008      	b.n	8005d7e <_printf_common+0xb2>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4649      	mov	r1, r9
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c0      	blx	r8
 8005d76:	3001      	adds	r0, #1
 8005d78:	d103      	bne.n	8005d82 <_printf_common+0xb6>
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	3501      	adds	r5, #1
 8005d84:	e7c1      	b.n	8005d0a <_printf_common+0x3e>
 8005d86:	2030      	movs	r0, #48	; 0x30
 8005d88:	18e1      	adds	r1, r4, r3
 8005d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d94:	4422      	add	r2, r4
 8005d96:	3302      	adds	r3, #2
 8005d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d9c:	e7c2      	b.n	8005d24 <_printf_common+0x58>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4622      	mov	r2, r4
 8005da2:	4649      	mov	r1, r9
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c0      	blx	r8
 8005da8:	3001      	adds	r0, #1
 8005daa:	d0e6      	beq.n	8005d7a <_printf_common+0xae>
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7d9      	b.n	8005d64 <_printf_common+0x98>

08005db0 <_printf_i>:
 8005db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	7e0f      	ldrb	r7, [r1, #24]
 8005db6:	4691      	mov	r9, r2
 8005db8:	2f78      	cmp	r7, #120	; 0x78
 8005dba:	4680      	mov	r8, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	469a      	mov	sl, r3
 8005dc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dc6:	d807      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dc8:	2f62      	cmp	r7, #98	; 0x62
 8005dca:	d80a      	bhi.n	8005de2 <_printf_i+0x32>
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	f000 80d5 	beq.w	8005f7c <_printf_i+0x1cc>
 8005dd2:	2f58      	cmp	r7, #88	; 0x58
 8005dd4:	f000 80c1 	beq.w	8005f5a <_printf_i+0x1aa>
 8005dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005de0:	e03a      	b.n	8005e58 <_printf_i+0xa8>
 8005de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005de6:	2b15      	cmp	r3, #21
 8005de8:	d8f6      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dea:	a101      	add	r1, pc, #4	; (adr r1, 8005df0 <_printf_i+0x40>)
 8005dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005dd9 	.word	0x08005dd9
 8005dfc:	08005dd9 	.word	0x08005dd9
 8005e00:	08005dd9 	.word	0x08005dd9
 8005e04:	08005dd9 	.word	0x08005dd9
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005dd9 	.word	0x08005dd9
 8005e10:	08005dd9 	.word	0x08005dd9
 8005e14:	08005dd9 	.word	0x08005dd9
 8005e18:	08005dd9 	.word	0x08005dd9
 8005e1c:	08005f63 	.word	0x08005f63
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005f1d 	.word	0x08005f1d
 8005e28:	08005dd9 	.word	0x08005dd9
 8005e2c:	08005dd9 	.word	0x08005dd9
 8005e30:	08005f85 	.word	0x08005f85
 8005e34:	08005dd9 	.word	0x08005dd9
 8005e38:	08005e89 	.word	0x08005e89
 8005e3c:	08005dd9 	.word	0x08005dd9
 8005e40:	08005dd9 	.word	0x08005dd9
 8005e44:	08005f25 	.word	0x08005f25
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	602a      	str	r2, [r5, #0]
 8005e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0a0      	b.n	8005f9e <_printf_i+0x1ee>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	682b      	ldr	r3, [r5, #0]
 8005e60:	0607      	lsls	r7, r0, #24
 8005e62:	f103 0104 	add.w	r1, r3, #4
 8005e66:	6029      	str	r1, [r5, #0]
 8005e68:	d501      	bpl.n	8005e6e <_printf_i+0xbe>
 8005e6a:	681e      	ldr	r6, [r3, #0]
 8005e6c:	e003      	b.n	8005e76 <_printf_i+0xc6>
 8005e6e:	0646      	lsls	r6, r0, #25
 8005e70:	d5fb      	bpl.n	8005e6a <_printf_i+0xba>
 8005e72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	da03      	bge.n	8005e82 <_printf_i+0xd2>
 8005e7a:	232d      	movs	r3, #45	; 0x2d
 8005e7c:	4276      	negs	r6, r6
 8005e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e82:	230a      	movs	r3, #10
 8005e84:	4859      	ldr	r0, [pc, #356]	; (8005fec <_printf_i+0x23c>)
 8005e86:	e012      	b.n	8005eae <_printf_i+0xfe>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	1d19      	adds	r1, r3, #4
 8005e8e:	6029      	str	r1, [r5, #0]
 8005e90:	0605      	lsls	r5, r0, #24
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0xe8>
 8005e94:	681e      	ldr	r6, [r3, #0]
 8005e96:	e002      	b.n	8005e9e <_printf_i+0xee>
 8005e98:	0641      	lsls	r1, r0, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0xe4>
 8005e9c:	881e      	ldrh	r6, [r3, #0]
 8005e9e:	2f6f      	cmp	r7, #111	; 0x6f
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2308      	moveq	r3, #8
 8005ea4:	230a      	movne	r3, #10
 8005ea6:	4851      	ldr	r0, [pc, #324]	; (8005fec <_printf_i+0x23c>)
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eae:	6865      	ldr	r5, [r4, #4]
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	bfa8      	it	ge
 8005eb4:	6821      	ldrge	r1, [r4, #0]
 8005eb6:	60a5      	str	r5, [r4, #8]
 8005eb8:	bfa4      	itt	ge
 8005eba:	f021 0104 	bicge.w	r1, r1, #4
 8005ebe:	6021      	strge	r1, [r4, #0]
 8005ec0:	b90e      	cbnz	r6, 8005ec6 <_printf_i+0x116>
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	d04b      	beq.n	8005f5e <_printf_i+0x1ae>
 8005ec6:	4615      	mov	r5, r2
 8005ec8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ecc:	fb03 6711 	mls	r7, r3, r1, r6
 8005ed0:	5dc7      	ldrb	r7, [r0, r7]
 8005ed2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ed6:	4637      	mov	r7, r6
 8005ed8:	42bb      	cmp	r3, r7
 8005eda:	460e      	mov	r6, r1
 8005edc:	d9f4      	bls.n	8005ec8 <_printf_i+0x118>
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d10b      	bne.n	8005efa <_printf_i+0x14a>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	07de      	lsls	r6, r3, #31
 8005ee6:	d508      	bpl.n	8005efa <_printf_i+0x14a>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	6861      	ldr	r1, [r4, #4]
 8005eec:	4299      	cmp	r1, r3
 8005eee:	bfde      	ittt	le
 8005ef0:	2330      	movle	r3, #48	; 0x30
 8005ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005efa:	1b52      	subs	r2, r2, r5
 8005efc:	6122      	str	r2, [r4, #16]
 8005efe:	464b      	mov	r3, r9
 8005f00:	4621      	mov	r1, r4
 8005f02:	4640      	mov	r0, r8
 8005f04:	f8cd a000 	str.w	sl, [sp]
 8005f08:	aa03      	add	r2, sp, #12
 8005f0a:	f7ff fedf 	bl	8005ccc <_printf_common>
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d14a      	bne.n	8005fa8 <_printf_i+0x1f8>
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	b004      	add	sp, #16
 8005f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	f043 0320 	orr.w	r3, r3, #32
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	2778      	movs	r7, #120	; 0x78
 8005f26:	4832      	ldr	r0, [pc, #200]	; (8005ff0 <_printf_i+0x240>)
 8005f28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	6829      	ldr	r1, [r5, #0]
 8005f30:	061f      	lsls	r7, r3, #24
 8005f32:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f36:	d402      	bmi.n	8005f3e <_printf_i+0x18e>
 8005f38:	065f      	lsls	r7, r3, #25
 8005f3a:	bf48      	it	mi
 8005f3c:	b2b6      	uxthmi	r6, r6
 8005f3e:	07df      	lsls	r7, r3, #31
 8005f40:	bf48      	it	mi
 8005f42:	f043 0320 	orrmi.w	r3, r3, #32
 8005f46:	6029      	str	r1, [r5, #0]
 8005f48:	bf48      	it	mi
 8005f4a:	6023      	strmi	r3, [r4, #0]
 8005f4c:	b91e      	cbnz	r6, 8005f56 <_printf_i+0x1a6>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f023 0320 	bic.w	r3, r3, #32
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	2310      	movs	r3, #16
 8005f58:	e7a6      	b.n	8005ea8 <_printf_i+0xf8>
 8005f5a:	4824      	ldr	r0, [pc, #144]	; (8005fec <_printf_i+0x23c>)
 8005f5c:	e7e4      	b.n	8005f28 <_printf_i+0x178>
 8005f5e:	4615      	mov	r5, r2
 8005f60:	e7bd      	b.n	8005ede <_printf_i+0x12e>
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	6826      	ldr	r6, [r4, #0]
 8005f66:	1d18      	adds	r0, r3, #4
 8005f68:	6961      	ldr	r1, [r4, #20]
 8005f6a:	6028      	str	r0, [r5, #0]
 8005f6c:	0635      	lsls	r5, r6, #24
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	d501      	bpl.n	8005f76 <_printf_i+0x1c6>
 8005f72:	6019      	str	r1, [r3, #0]
 8005f74:	e002      	b.n	8005f7c <_printf_i+0x1cc>
 8005f76:	0670      	lsls	r0, r6, #25
 8005f78:	d5fb      	bpl.n	8005f72 <_printf_i+0x1c2>
 8005f7a:	8019      	strh	r1, [r3, #0]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4615      	mov	r5, r2
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	e7bc      	b.n	8005efe <_printf_i+0x14e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	2100      	movs	r1, #0
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 f859 	bl	8006048 <memchr>
 8005f96:	b108      	cbz	r0, 8005f9c <_printf_i+0x1ec>
 8005f98:	1b40      	subs	r0, r0, r5
 8005f9a:	6060      	str	r0, [r4, #4]
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa6:	e7aa      	b.n	8005efe <_printf_i+0x14e>
 8005fa8:	462a      	mov	r2, r5
 8005faa:	4649      	mov	r1, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	47d0      	blx	sl
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d0ad      	beq.n	8005f12 <_printf_i+0x162>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	079b      	lsls	r3, r3, #30
 8005fba:	d413      	bmi.n	8005fe4 <_printf_i+0x234>
 8005fbc:	68e0      	ldr	r0, [r4, #12]
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	4298      	cmp	r0, r3
 8005fc2:	bfb8      	it	lt
 8005fc4:	4618      	movlt	r0, r3
 8005fc6:	e7a6      	b.n	8005f16 <_printf_i+0x166>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4632      	mov	r2, r6
 8005fcc:	4649      	mov	r1, r9
 8005fce:	4640      	mov	r0, r8
 8005fd0:	47d0      	blx	sl
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d09d      	beq.n	8005f12 <_printf_i+0x162>
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	68e3      	ldr	r3, [r4, #12]
 8005fda:	9903      	ldr	r1, [sp, #12]
 8005fdc:	1a5b      	subs	r3, r3, r1
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	dcf2      	bgt.n	8005fc8 <_printf_i+0x218>
 8005fe2:	e7eb      	b.n	8005fbc <_printf_i+0x20c>
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	f104 0619 	add.w	r6, r4, #25
 8005fea:	e7f5      	b.n	8005fd8 <_printf_i+0x228>
 8005fec:	08007a3f 	.word	0x08007a3f
 8005ff0:	08007a50 	.word	0x08007a50

08005ff4 <memmove>:
 8005ff4:	4288      	cmp	r0, r1
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	eb01 0402 	add.w	r4, r1, r2
 8005ffc:	d902      	bls.n	8006004 <memmove+0x10>
 8005ffe:	4284      	cmp	r4, r0
 8006000:	4623      	mov	r3, r4
 8006002:	d807      	bhi.n	8006014 <memmove+0x20>
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	42a1      	cmp	r1, r4
 8006008:	d008      	beq.n	800601c <memmove+0x28>
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006012:	e7f8      	b.n	8006006 <memmove+0x12>
 8006014:	4601      	mov	r1, r0
 8006016:	4402      	add	r2, r0
 8006018:	428a      	cmp	r2, r1
 800601a:	d100      	bne.n	800601e <memmove+0x2a>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006026:	e7f7      	b.n	8006018 <memmove+0x24>

08006028 <_sbrk_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	2300      	movs	r3, #0
 800602c:	4d05      	ldr	r5, [pc, #20]	; (8006044 <_sbrk_r+0x1c>)
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fc f898 	bl	8002168 <_sbrk>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_sbrk_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_sbrk_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000794 	.word	0x20000794

08006048 <memchr>:
 8006048:	4603      	mov	r3, r0
 800604a:	b510      	push	{r4, lr}
 800604c:	b2c9      	uxtb	r1, r1
 800604e:	4402      	add	r2, r0
 8006050:	4293      	cmp	r3, r2
 8006052:	4618      	mov	r0, r3
 8006054:	d101      	bne.n	800605a <memchr+0x12>
 8006056:	2000      	movs	r0, #0
 8006058:	e003      	b.n	8006062 <memchr+0x1a>
 800605a:	7804      	ldrb	r4, [r0, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	428c      	cmp	r4, r1
 8006060:	d1f6      	bne.n	8006050 <memchr+0x8>
 8006062:	bd10      	pop	{r4, pc}

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	4291      	cmp	r1, r2
 8006078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <_realloc_r>:
 8006080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006084:	4680      	mov	r8, r0
 8006086:	4614      	mov	r4, r2
 8006088:	460e      	mov	r6, r1
 800608a:	b921      	cbnz	r1, 8006096 <_realloc_r+0x16>
 800608c:	4611      	mov	r1, r2
 800608e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006092:	f7ff bc37 	b.w	8005904 <_malloc_r>
 8006096:	b92a      	cbnz	r2, 80060a4 <_realloc_r+0x24>
 8006098:	f7ff fbcc 	bl	8005834 <_free_r>
 800609c:	4625      	mov	r5, r4
 800609e:	4628      	mov	r0, r5
 80060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a4:	f000 f81b 	bl	80060de <_malloc_usable_size_r>
 80060a8:	4284      	cmp	r4, r0
 80060aa:	4607      	mov	r7, r0
 80060ac:	d802      	bhi.n	80060b4 <_realloc_r+0x34>
 80060ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060b2:	d812      	bhi.n	80060da <_realloc_r+0x5a>
 80060b4:	4621      	mov	r1, r4
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7ff fc24 	bl	8005904 <_malloc_r>
 80060bc:	4605      	mov	r5, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0ed      	beq.n	800609e <_realloc_r+0x1e>
 80060c2:	42bc      	cmp	r4, r7
 80060c4:	4622      	mov	r2, r4
 80060c6:	4631      	mov	r1, r6
 80060c8:	bf28      	it	cs
 80060ca:	463a      	movcs	r2, r7
 80060cc:	f7ff ffca 	bl	8006064 <memcpy>
 80060d0:	4631      	mov	r1, r6
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fbae 	bl	8005834 <_free_r>
 80060d8:	e7e1      	b.n	800609e <_realloc_r+0x1e>
 80060da:	4635      	mov	r5, r6
 80060dc:	e7df      	b.n	800609e <_realloc_r+0x1e>

080060de <_malloc_usable_size_r>:
 80060de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e2:	1f18      	subs	r0, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfbc      	itt	lt
 80060e8:	580b      	ldrlt	r3, [r1, r0]
 80060ea:	18c0      	addlt	r0, r0, r3
 80060ec:	4770      	bx	lr
	...

080060f0 <log>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	4604      	mov	r4, r0
 80060f4:	460d      	mov	r5, r1
 80060f6:	f000 f833 	bl	8006160 <__ieee754_log>
 80060fa:	4622      	mov	r2, r4
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	462b      	mov	r3, r5
 8006102:	4620      	mov	r0, r4
 8006104:	4629      	mov	r1, r5
 8006106:	f7fa fc79 	bl	80009fc <__aeabi_dcmpun>
 800610a:	b998      	cbnz	r0, 8006134 <log+0x44>
 800610c:	2200      	movs	r2, #0
 800610e:	2300      	movs	r3, #0
 8006110:	4620      	mov	r0, r4
 8006112:	4629      	mov	r1, r5
 8006114:	f7fa fc68 	bl	80009e8 <__aeabi_dcmpgt>
 8006118:	b960      	cbnz	r0, 8006134 <log+0x44>
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa fc39 	bl	8000998 <__aeabi_dcmpeq>
 8006126:	b140      	cbz	r0, 800613a <log+0x4a>
 8006128:	f7ff fb58 	bl	80057dc <__errno>
 800612c:	2322      	movs	r3, #34	; 0x22
 800612e:	2600      	movs	r6, #0
 8006130:	4f06      	ldr	r7, [pc, #24]	; (800614c <log+0x5c>)
 8006132:	6003      	str	r3, [r0, #0]
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613a:	f7ff fb4f 	bl	80057dc <__errno>
 800613e:	2321      	movs	r3, #33	; 0x21
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	4803      	ldr	r0, [pc, #12]	; (8006150 <log+0x60>)
 8006144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006148:	f000 b804 	b.w	8006154 <nan>
 800614c:	fff00000 	.word	0xfff00000
 8006150:	08007a33 	.word	0x08007a33

08006154 <nan>:
 8006154:	2000      	movs	r0, #0
 8006156:	4901      	ldr	r1, [pc, #4]	; (800615c <nan+0x8>)
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	7ff80000 	.word	0x7ff80000

08006160 <__ieee754_log>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	460d      	mov	r5, r1
 800616e:	b087      	sub	sp, #28
 8006170:	da24      	bge.n	80061bc <__ieee754_log+0x5c>
 8006172:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006176:	4304      	orrs	r4, r0
 8006178:	d108      	bne.n	800618c <__ieee754_log+0x2c>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	2000      	movs	r0, #0
 8006180:	49cb      	ldr	r1, [pc, #812]	; (80064b0 <__ieee754_log+0x350>)
 8006182:	f7fa facb 	bl	800071c <__aeabi_ddiv>
 8006186:	b007      	add	sp, #28
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	2900      	cmp	r1, #0
 800618e:	da04      	bge.n	800619a <__ieee754_log+0x3a>
 8006190:	f7f9 ffe2 	bl	8000158 <__aeabi_dsub>
 8006194:	2200      	movs	r2, #0
 8006196:	2300      	movs	r3, #0
 8006198:	e7f3      	b.n	8006182 <__ieee754_log+0x22>
 800619a:	2200      	movs	r2, #0
 800619c:	4bc5      	ldr	r3, [pc, #788]	; (80064b4 <__ieee754_log+0x354>)
 800619e:	f7fa f993 	bl	80004c8 <__aeabi_dmul>
 80061a2:	460b      	mov	r3, r1
 80061a4:	460d      	mov	r5, r1
 80061a6:	4602      	mov	r2, r0
 80061a8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80061ac:	48c2      	ldr	r0, [pc, #776]	; (80064b8 <__ieee754_log+0x358>)
 80061ae:	4285      	cmp	r5, r0
 80061b0:	dd06      	ble.n	80061c0 <__ieee754_log+0x60>
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	f7f9 ffd1 	bl	800015c <__adddf3>
 80061ba:	e7e4      	b.n	8006186 <__ieee754_log+0x26>
 80061bc:	2100      	movs	r1, #0
 80061be:	e7f5      	b.n	80061ac <__ieee754_log+0x4c>
 80061c0:	152c      	asrs	r4, r5, #20
 80061c2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80061c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80061ca:	440c      	add	r4, r1
 80061cc:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80061d0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80061d4:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 80061d8:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 80061dc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80061e0:	ea41 0305 	orr.w	r3, r1, r5
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	4bb4      	ldr	r3, [pc, #720]	; (80064bc <__ieee754_log+0x35c>)
 80061ec:	f7f9 ffb4 	bl	8000158 <__aeabi_dsub>
 80061f0:	1cab      	adds	r3, r5, #2
 80061f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	4682      	mov	sl, r0
 80061fa:	468b      	mov	fp, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8006204:	dc53      	bgt.n	80062ae <__ieee754_log+0x14e>
 8006206:	2300      	movs	r3, #0
 8006208:	f7fa fbc6 	bl	8000998 <__aeabi_dcmpeq>
 800620c:	b1d0      	cbz	r0, 8006244 <__ieee754_log+0xe4>
 800620e:	2c00      	cmp	r4, #0
 8006210:	f000 8122 	beq.w	8006458 <__ieee754_log+0x2f8>
 8006214:	4620      	mov	r0, r4
 8006216:	f7fa f8ed 	bl	80003f4 <__aeabi_i2d>
 800621a:	a391      	add	r3, pc, #580	; (adr r3, 8006460 <__ieee754_log+0x300>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	f7fa f950 	bl	80004c8 <__aeabi_dmul>
 8006228:	a38f      	add	r3, pc, #572	; (adr r3, 8006468 <__ieee754_log+0x308>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	4604      	mov	r4, r0
 8006230:	460d      	mov	r5, r1
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa f947 	bl	80004c8 <__aeabi_dmul>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	e7b8      	b.n	80061b6 <__ieee754_log+0x56>
 8006244:	a38a      	add	r3, pc, #552	; (adr r3, 8006470 <__ieee754_log+0x310>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	4650      	mov	r0, sl
 800624c:	4659      	mov	r1, fp
 800624e:	f7fa f93b 	bl	80004c8 <__aeabi_dmul>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	2000      	movs	r0, #0
 8006258:	4999      	ldr	r1, [pc, #612]	; (80064c0 <__ieee754_log+0x360>)
 800625a:	f7f9 ff7d 	bl	8000158 <__aeabi_dsub>
 800625e:	4652      	mov	r2, sl
 8006260:	4606      	mov	r6, r0
 8006262:	460f      	mov	r7, r1
 8006264:	465b      	mov	r3, fp
 8006266:	4650      	mov	r0, sl
 8006268:	4659      	mov	r1, fp
 800626a:	f7fa f92d 	bl	80004c8 <__aeabi_dmul>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa f927 	bl	80004c8 <__aeabi_dmul>
 800627a:	4606      	mov	r6, r0
 800627c:	460f      	mov	r7, r1
 800627e:	b914      	cbnz	r4, 8006286 <__ieee754_log+0x126>
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	e0a2      	b.n	80063cc <__ieee754_log+0x26c>
 8006286:	4620      	mov	r0, r4
 8006288:	f7fa f8b4 	bl	80003f4 <__aeabi_i2d>
 800628c:	a374      	add	r3, pc, #464	; (adr r3, 8006460 <__ieee754_log+0x300>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	4680      	mov	r8, r0
 8006294:	4689      	mov	r9, r1
 8006296:	f7fa f917 	bl	80004c8 <__aeabi_dmul>
 800629a:	a373      	add	r3, pc, #460	; (adr r3, 8006468 <__ieee754_log+0x308>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa f90e 	bl	80004c8 <__aeabi_dmul>
 80062ac:	e0a7      	b.n	80063fe <__ieee754_log+0x29e>
 80062ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062b2:	f7f9 ff53 	bl	800015c <__adddf3>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4650      	mov	r0, sl
 80062bc:	4659      	mov	r1, fp
 80062be:	f7fa fa2d 	bl	800071c <__aeabi_ddiv>
 80062c2:	e9cd 0100 	strd	r0, r1, [sp]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7fa f894 	bl	80003f4 <__aeabi_i2d>
 80062cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7fa f8f6 	bl	80004c8 <__aeabi_dmul>
 80062dc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80062e0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80062e4:	4602      	mov	r2, r0
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	460b      	mov	r3, r1
 80062ea:	4606      	mov	r6, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	f7fa f8eb 	bl	80004c8 <__aeabi_dmul>
 80062f2:	a361      	add	r3, pc, #388	; (adr r3, 8006478 <__ieee754_log+0x318>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	4680      	mov	r8, r0
 80062fa:	4689      	mov	r9, r1
 80062fc:	f7fa f8e4 	bl	80004c8 <__aeabi_dmul>
 8006300:	a35f      	add	r3, pc, #380	; (adr r3, 8006480 <__ieee754_log+0x320>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ff29 	bl	800015c <__adddf3>
 800630a:	4642      	mov	r2, r8
 800630c:	464b      	mov	r3, r9
 800630e:	f7fa f8db 	bl	80004c8 <__aeabi_dmul>
 8006312:	a35d      	add	r3, pc, #372	; (adr r3, 8006488 <__ieee754_log+0x328>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7f9 ff20 	bl	800015c <__adddf3>
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	f7fa f8d2 	bl	80004c8 <__aeabi_dmul>
 8006324:	a35a      	add	r3, pc, #360	; (adr r3, 8006490 <__ieee754_log+0x330>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7f9 ff17 	bl	800015c <__adddf3>
 800632e:	4632      	mov	r2, r6
 8006330:	463b      	mov	r3, r7
 8006332:	f7fa f8c9 	bl	80004c8 <__aeabi_dmul>
 8006336:	a358      	add	r3, pc, #352	; (adr r3, 8006498 <__ieee754_log+0x338>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7fa f8c0 	bl	80004c8 <__aeabi_dmul>
 8006348:	a355      	add	r3, pc, #340	; (adr r3, 80064a0 <__ieee754_log+0x340>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7f9 ff05 	bl	800015c <__adddf3>
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	f7fa f8b7 	bl	80004c8 <__aeabi_dmul>
 800635a:	a353      	add	r3, pc, #332	; (adr r3, 80064a8 <__ieee754_log+0x348>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f7f9 fefc 	bl	800015c <__adddf3>
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	f7fa f8ae 	bl	80004c8 <__aeabi_dmul>
 800636c:	460b      	mov	r3, r1
 800636e:	4602      	mov	r2, r0
 8006370:	4639      	mov	r1, r7
 8006372:	4630      	mov	r0, r6
 8006374:	f7f9 fef2 	bl	800015c <__adddf3>
 8006378:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800637c:	9b05      	ldr	r3, [sp, #20]
 800637e:	3551      	adds	r5, #81	; 0x51
 8006380:	431d      	orrs	r5, r3
 8006382:	2d00      	cmp	r5, #0
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	dd48      	ble.n	800641c <__ieee754_log+0x2bc>
 800638a:	2200      	movs	r2, #0
 800638c:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <__ieee754_log+0x360>)
 800638e:	4650      	mov	r0, sl
 8006390:	4659      	mov	r1, fp
 8006392:	f7fa f899 	bl	80004c8 <__aeabi_dmul>
 8006396:	4652      	mov	r2, sl
 8006398:	465b      	mov	r3, fp
 800639a:	f7fa f895 	bl	80004c8 <__aeabi_dmul>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4606      	mov	r6, r0
 80063a4:	460f      	mov	r7, r1
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7f9 fed7 	bl	800015c <__adddf3>
 80063ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b2:	f7fa f889 	bl	80004c8 <__aeabi_dmul>
 80063b6:	4680      	mov	r8, r0
 80063b8:	4689      	mov	r9, r1
 80063ba:	b964      	cbnz	r4, 80063d6 <__ieee754_log+0x276>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	f7f9 fec8 	bl	8000158 <__aeabi_dsub>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 fec2 	bl	8000158 <__aeabi_dsub>
 80063d4:	e6d7      	b.n	8006186 <__ieee754_log+0x26>
 80063d6:	a322      	add	r3, pc, #136	; (adr r3, 8006460 <__ieee754_log+0x300>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e0:	f7fa f872 	bl	80004c8 <__aeabi_dmul>
 80063e4:	a320      	add	r3, pc, #128	; (adr r3, 8006468 <__ieee754_log+0x308>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	4604      	mov	r4, r0
 80063ec:	460d      	mov	r5, r1
 80063ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f2:	f7fa f869 	bl	80004c8 <__aeabi_dmul>
 80063f6:	4642      	mov	r2, r8
 80063f8:	464b      	mov	r3, r9
 80063fa:	f7f9 feaf 	bl	800015c <__adddf3>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4630      	mov	r0, r6
 8006404:	4639      	mov	r1, r7
 8006406:	f7f9 fea7 	bl	8000158 <__aeabi_dsub>
 800640a:	4652      	mov	r2, sl
 800640c:	465b      	mov	r3, fp
 800640e:	f7f9 fea3 	bl	8000158 <__aeabi_dsub>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	e7d9      	b.n	80063d0 <__ieee754_log+0x270>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4650      	mov	r0, sl
 8006422:	4659      	mov	r1, fp
 8006424:	f7f9 fe98 	bl	8000158 <__aeabi_dsub>
 8006428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800642c:	f7fa f84c 	bl	80004c8 <__aeabi_dmul>
 8006430:	4606      	mov	r6, r0
 8006432:	460f      	mov	r7, r1
 8006434:	2c00      	cmp	r4, #0
 8006436:	f43f af23 	beq.w	8006280 <__ieee754_log+0x120>
 800643a:	a309      	add	r3, pc, #36	; (adr r3, 8006460 <__ieee754_log+0x300>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006444:	f7fa f840 	bl	80004c8 <__aeabi_dmul>
 8006448:	a307      	add	r3, pc, #28	; (adr r3, 8006468 <__ieee754_log+0x308>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006456:	e727      	b.n	80062a8 <__ieee754_log+0x148>
 8006458:	2000      	movs	r0, #0
 800645a:	2100      	movs	r1, #0
 800645c:	e693      	b.n	8006186 <__ieee754_log+0x26>
 800645e:	bf00      	nop
 8006460:	fee00000 	.word	0xfee00000
 8006464:	3fe62e42 	.word	0x3fe62e42
 8006468:	35793c76 	.word	0x35793c76
 800646c:	3dea39ef 	.word	0x3dea39ef
 8006470:	55555555 	.word	0x55555555
 8006474:	3fd55555 	.word	0x3fd55555
 8006478:	df3e5244 	.word	0xdf3e5244
 800647c:	3fc2f112 	.word	0x3fc2f112
 8006480:	96cb03de 	.word	0x96cb03de
 8006484:	3fc74664 	.word	0x3fc74664
 8006488:	94229359 	.word	0x94229359
 800648c:	3fd24924 	.word	0x3fd24924
 8006490:	55555593 	.word	0x55555593
 8006494:	3fe55555 	.word	0x3fe55555
 8006498:	d078c69f 	.word	0xd078c69f
 800649c:	3fc39a09 	.word	0x3fc39a09
 80064a0:	1d8e78af 	.word	0x1d8e78af
 80064a4:	3fcc71c5 	.word	0x3fcc71c5
 80064a8:	9997fa04 	.word	0x9997fa04
 80064ac:	3fd99999 	.word	0x3fd99999
 80064b0:	c3500000 	.word	0xc3500000
 80064b4:	43500000 	.word	0x43500000
 80064b8:	7fefffff 	.word	0x7fefffff
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	3fe00000 	.word	0x3fe00000

080064c4 <_init>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr

080064d0 <_fini>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	bf00      	nop
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr
